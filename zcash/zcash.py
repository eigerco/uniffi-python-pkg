# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_uniffi_zcash_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_uniffi_zcash_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_uniffi_zcash_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)
class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_zcash")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_uniffi_zcash_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_uniffi_zcash_checksum_func_decode_extended_full_viewing_key() != 43:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_decode_extended_spending_key() != 11044:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_decode_payment_address() != 6408:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_decode_transparent_address() != 14315:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_decrypt_and_store_transaction() != 19730:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_decrypt_transaction() != 36024:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_extended_full_viewing_key() != 9529:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_extended_spending_key() != 31408:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_payment_address() != 18682:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_payment_address_p() != 8373:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address() != 51536:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address_p() != 44460:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_scan_cached_blocks() != 35281:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_fixed() != 851:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_zip317() != 17359:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_fixed() != 45543:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_zip317() != 49020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_spend_main_fixed() != 37082:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_spend_main_zip317() != 3081:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_spend_test_fixed() != 65033:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_func_spend_test_zip317() != 40544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_secpsecretkey_serialize_secret() != 54704:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_string() != 28106:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32() != 38141:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32_array() != 20821:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64() != 37018:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64_array() != 34269:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u8_array() != 33558:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_sapling_spendable_value() != 62416:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_total() != 46654:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_unshielded() != 51730:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_height() != 13020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_recover_until() != 29885:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_sapling_frontier() != 20585:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_external_secret_key() != 23016:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_internal_secret_key() != 47416:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_account_pubkey() != 30998:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_bytes() != 49891:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_external_ivk() != 35623:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_internal_ivk() != 47007:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_external_ovk() != 32909:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_internal_ovk() != 7272:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_ovks_for_shielding() != 53259:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_serialize() != 61612:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_account() != 6738:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_diversifier_index() != 21690:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashamount_value() != 59960:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashanchor_to_bytes() != 60719:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashbalance_total() != 19876:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashblockheight_value() != 22213:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashblockmeta_block_file_path() != 47636:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_hash() != 43310:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_height() != 45627:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_sapling_tree_size() != 35477:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttree_append() != 9731:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_root_hash() != 61519:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_subtree_end_height() != 42288:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_account() != 46420:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_index() != 47662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_memo() != 60659:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_note() != 1564:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_transfer_type() != 60998:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_address() != 56872:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_change_address() != 3292:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_decrypt_diversifier() != 17128:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_default_address() != 26955:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_address() != 34240:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_change_address() != 27945:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_find_address() != 8183:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_fvk() != 41453:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_bytes() != 61280:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ivk() != 64505:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_nk() != 48754:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ovk() != 62774:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifier_to_bytes() != 30398:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_increment() != 11312:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_bytes() != 63159:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_u32() != 44617:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_action() != 44513:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_dust_threshold() != 7721:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_proof_generation_key() != 61644:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_to_bytes() != 43168:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_address() != 8014:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_default_address() != 29996:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_child() != 47098:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_internal() != 38309:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_encode() != 29123:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_find_address() != 34143:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_bytes() != 18841:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key() != 50451:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_derive_private_key() != 12389:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_to_bytes() != 5856:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_default_address() != 22729:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_child() != 41513:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_internal() != 55203:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_encode() != 44371:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_bytes() != 17343:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key() != 62056:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_default_address() != 11498:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_derive_address() != 27436:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_to_bytes() != 51247:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashexternalovk_as_bytes() != 36375:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashextractednotecommitment_to_bytes() != 17657:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfixedfeerule_fixed_fee() != 14897:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_find_block() != 39154:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_get_max_cached_height() != 51557:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_initialize() != 11661:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_write_block_metadata() != 23343:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_ovk() != 17756:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_to_bytes() != 36808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_vk() != 891:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_append() != 6023:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_path() != 58534:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_default_address() != 38026:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_to_bytes() != 20243:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashinternalovk_as_bytes() != 31389:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashjubjubfr_to_bytes() != 31411:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_is_valid() != 51631:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_normalize_index() != 54488:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_raw_index() != 11448:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashmemobytes_data() != 58446:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashnonnegativeamount_value() != 16814:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashnullifierderivingkey_to_bytes() != 55602:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cmx() != 8135:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cv_net() != 40584:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_encrypted_note() != 30980:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_nullifier() != 52746:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_diversifier() != 47461:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_to_raw_address_bytes() != 30894:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_actions() != 28699:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_anchor() != 54544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_key() != 47785:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_keys() != 25404:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_flags() != 36198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_output_with_ovk() != 5638:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_outputs_with_ovks() != 3017:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_value_balance() != 10325:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_verify_proof() != 50799:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifier_to_bytes() != 40646:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifierindex_to_bytes() != 23735:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_outputs_enabled() != 21630:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_spends_enabled() != 20196:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_to_byte() != 40819:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address() != 37932:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address_at() != 13313:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_scope_for_address() != 12826:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_bytes() != 4066:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ivk() != 55622:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ovk() != 27275:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address() != 4673:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address_at() != 56154:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_diversifier_index() != 41453:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_to_bytes() != 7328:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklehash_to_bytes() != 27276:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklepath_root() != 2184:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_commitment() != 5572:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_recipient() != 23794:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_value() != 62317:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotecommitment_to_extracted_note_commitment() != 43802:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotevalue_value() != 18931:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardnullifier_to_bytes() != 19883:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardoutgoingviewingkey_to_bytes() != 40703:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardrandomseed_to_bytes() != 60561:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_bytes() != 2204:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_fvk() != 31948:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_recipient() != 38963:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_spend() != 25684:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_build() != 29859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashorchardvaluecommitment_to_bytes() != 60988:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashoutgoingviewingkey_to_bytes() != 29445:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_create_note() != 16613:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_diversifier() != 4558:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_encode() != 47540:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_pk_d() != 3756:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_to_bytes() != 62344:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashproofgenerationkey_to_viewing_key() != 13370:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashratio_denominator() != 49055:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashratio_numerator() != 13950:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_diversifier() != 38012:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_internal_note_id() != 60026:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_note_commitment_tree_position() != 2095:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_value() != 45731:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashrecipientaddress_encode() != 6086:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_outputs() != 2847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_spends() != 25103:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_value_balance() != 20257:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingextractednotecommitment_to_bytes() != 48009:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_payment_address() != 57356:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_repr() != 3274:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_auth_path() != 7582:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_position() != 42629:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_output_index() != 10823:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_spend_index() != 18537:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_cmu() != 46875:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_value() != 41811:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnotevalue_inner() != 39749:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnullifier_to_bytes() != 32283:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cmu() != 37606:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cv() != 19907:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingpublickey_to_bytes() != 53973:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_anchor() != 57018:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_cv() != 36817:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_nullifier() != 49913:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_rk() != 56943:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsaplingvaluecommitment_to_bytes() != 15898:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_block_range() != 20621:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_is_empty() != 29099:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_len() != 1811:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_priority() != 8375:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_hash() != 40407:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_time() != 20298:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_height() != 2205:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_metadata() != 36584:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_commitments() != 58796:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_nullifier_map() != 45180:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_transactions() != 55439:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashscript_to_bytes() != 23762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_memo() != 54233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_output_index() != 31214:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_recipient() != 22353:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_sapling_change_to() != 33437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_value() != 23595:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_consensus_branch_id() != 18318:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_expiry_height() != 11948:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_lock_time() != 12936:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_orchard_bundle() != 43336:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_sapling_bundle() != 61494:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_to_bytes() != 45553:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_transparent_bundle() != 35192:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_txid() != 1587:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_version() != 3232:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_output() != 58509:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_spend() != 28498:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_input() != 33123:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_output() != 53451:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_build() != 60029:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_payments() != 42686:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_to_uri() != 51173:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_encode() != 21027:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_public_key() != 55021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_script() != 29922:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_script() != 5353:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_to_bytes() != 58716:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_is_coinbase() != 20027:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vin() != 8937:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vout() != 31247:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_bytes() != 38587:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_hex_string() != 3594:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxin_to_bytes() != 4105:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxout_recipient_address() != 35192:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxout_script_pubkey() != 3662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxout_to_bytes() != 29744:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxout_value() != 35166:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_orchard() != 24972:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_overwinter() != 14188:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sapling() != 58818:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sprout() != 21741:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_header() != 29274:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_selection() != 13597:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_to_bytes() != 61209:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_version_group_id() != 6711:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_encode() != 43943:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_orchard() != 55957:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_sapling() != 15283:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_transparent() != 2573:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_address() != 14263:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_default_address() != 47526:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_encode() != 52042:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_find_address() != 15089:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_orchard() != 42648:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_sapling() != 39731:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_transparent() != 14275:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_orchard() != 47836:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_sapling() != 18405:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_bytes() != 24111:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_unified_full_viewing_key() != 18827:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_transparent() != 39270:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_ivk() != 47894:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_to_payment_address() != 36128:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_fully_scanned() != 17616:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_max_scanned() != 16403:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_metadata() != 63726:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_chain_height() != 32301:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_create_account() != 39567:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_birthday() != 36042:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_for_ufvk() != 16427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_block_hash() != 5968:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_current_address() != 6512:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_max_height_hash() != 32097:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_memo() != 60807:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_min_unspent_height() != 44311:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_next_available_address() != 832:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_sapling_nullifiers() != 34710:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_spendable_sapling_notes() != 55091:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_target_and_anchor_heights() != 39736:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transaction() != 36828:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_balances() != 29772:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_receivers() != 44783:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_tx_height() != 32698:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unified_full_viewing_keys() != 3950:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unspent_transparent_outputs() != 63544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_birthday() != 20677:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_summary() != 7833:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_initialize() != 50021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_is_valid_account_extfvk() != 30457:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_blocks() != 41884:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_received_transparent_utxo() != 7966:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_sapling_subtree_roots() != 59990:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_select_spendable_sapling_notes() != 11902:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_decrypted_tx() != 39162:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_sent_tx() != 50042:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_suggest_scan_ranges() != 13781:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_truncate_to_height() != 41324:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_update_chain_tip() != 53618:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_account_balances() != 46767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_chain_tip_height() != 16303:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_fully_scanned_height() != 13225:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_is_synced() != 48420:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_scan_progress() != 22522:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_height() != 11140:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_outpoint() != 36462:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_recipient_address() != 59737:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_txout() != 2768:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_value() != 35662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_method_zcashzip317feerule_marginal_fee() != 8182:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_secpsecretkey_new() != 24450:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_testsupport_from_csv_file() != 51338:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbalance_zero() != 41009:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbirthday_from_treestate() != 59202:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_bytes() != 29354:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_extended_privkey() != 17854:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_seed() != 30363:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountpubkey_new() != 64025:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashaddressmetadata_new() != 50681:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_new() != 61544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_zero() != 27621:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashanchor_from_bytes() != 8647:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashbalance_zero() != 35188:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashblockhash_from_slice() != 53263:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashblockheight_new() != 5550:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmeta_new() != 16367:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmetadata_from_parts() != 13789:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttree_empty() != 25184:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttreeroot_from_parts() != 31456:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifiablefullviewingkey_from_bytes() != 58255:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifier_new() != 6084:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u32() != 40615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u64() != 61660:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_new() != 30153:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashdustoutputpolicy_new() != 26916:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_bytes() != 32908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_spending_key() != 59653:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_decode() != 57981:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_from_bytes() != 62935:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_from_bytes() != 47106:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random() != 1933:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random_with_seed_size() != 950:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_with_seed() != 65017:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_decode() != 45511:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_bytes() != 31395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_path() != 42966:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_master() != 61382:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashexternalivk_from_bytes() != 5395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashextractednotecommitment_from_bytes() != 12198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_non_standard() != 64005:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_standard() != 14392:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedsingleoutputchangestrategy_new() != 32638:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfsblockdb_for_path() != 34977:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_bytes() != 37803:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_expanded_spending_key() != 37490:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashincrementalwitness_from_tree() != 44102:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashinternalivk_from_bytes() != 4114:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashjubjubfr_from_bytes() != 41856:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_index() != 7885:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_u32() != 14229:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_hardened_from_normalize_index() != 36013:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_from_bytes() != 25125:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_new() != 47078:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_with_default_location() != 1509:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashmainfixedgreedyinputselector_new() != 11004:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashmainzip317greedyinputselector_new() != 64325:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_empty() != 52783:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_new() != 45435:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_nonnegative_i64() != 42055:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_u64() != 39966:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_zero() != 43170:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashnoteid_new() != 14039:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashnullifierderivingkey_from_bytes() != 34769:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardaddress_from_raw_address_bytes() != 42441:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifier_from_bytes() != 2473:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_bytes() != 45451:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u32() != 59810:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u64() != 65342:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_byte() != 5752:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_parts() != 1820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardfullviewingkey_from_bytes() != 52675:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardincomingviewingkey_from_bytes() != 59311:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_bytes() != 1473:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_cmx() != 39699:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklepath_from_parts() != 294:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnote_from_parts() != 57426:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnotevalue_from_raw() != 26192:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnullifier_from_bytes() != 40659:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardoutgoingviewingkey_from_bytes() != 26403:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardrandomseed_from_bytes() != 43792:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_bytes() != 25783:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_zip32_seed() != 34551:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardtransactionbuilder_new() != 52986:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashoutpoint_new() != 64962:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashoutgoingviewingkey_from_bytes() != 40852:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_decode() != 140:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_from_bytes() != 65004:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashprovingkey_new() != 3972:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashratio_new() != 13179:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_decode() != 370:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_shielded() != 39536:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_transparent() != 15448:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_unified() != 5482:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingextractednotecommitment_new() != 19900:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingmetadata_new() != 52155:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnode_from_cmu() != 52964:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnote_from_parts() != 6781:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnotevalue_from_raw() != 45373:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashscanrange_from_parts() != 6055:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashscannedblock_from_parts() != 44942:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashscript_from_bytes() != 19166:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashsenttransactionoutput_from_parts() != 56107:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtestfixedgreedyinputselector_new() != 41170:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtestzip317greedyinputselector_new() != 19551:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransaction_from_bytes() != 38030:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionbuilder_new() != 19445:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_empty() != 18477:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_from_uri() != 16881:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_new() != 25973:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_decode() != 57996:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_public_key() != 8477:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_script() != 47360:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_from_bytes() != 16433:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_new() != 60690:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtxid_from_bytes() != 33849:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtxout_new() != 43558:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_from_bytes() != 43105:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_suggested_for_branch() != 9191:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_decode() != 61186:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_new() != 65006:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_decode() != 34107:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_new() != 33879:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_bytes() != 30988:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_seed() != 47013:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashverifyingkey_new() != 45432:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletdb_for_path() != 16888:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletsummary_new() != 43547:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettransparentoutput_from_parts() != 17421:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettx_new() != 55032:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_non_standard() != 13263:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_standard() != 32217:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317singleoutputchangestrategy_new() != 66:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreefrontier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreefrontier.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeposition.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeposition.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeretention.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeretention.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_secpsecretkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_secpsecretkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_secpsecretkey_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_secpsecretkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_secpsecretkey_serialize_secret.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_secpsecretkey_serialize_secret.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_testsupport.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_testsupport.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_testsupport_from_csv_file.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_testsupport_from_csv_file.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_string.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32_array.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32_array.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64_array.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64_array.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u8_array.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u8_array.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_timeoffsetdatetime.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_timeoffsetdatetime.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbalance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbalance.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbalance_zero.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbalance_zero.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_sapling_spendable_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_sapling_spendable_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_total.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_total.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_unshielded.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_unshielded.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbirthday.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbirthday.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbirthday_from_treestate.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbirthday_from_treestate.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_recover_until.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_recover_until.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_sapling_frontier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_sapling_frontier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountprivkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountprivkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_extended_privkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_extended_privkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_seed.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_seed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_external_secret_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_external_secret_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_internal_secret_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_internal_secret_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_account_pubkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_account_pubkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountpubkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountpubkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountpubkey_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountpubkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_external_ivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_external_ivk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_internal_ivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_internal_ivk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_external_ovk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_external_ovk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_internal_ovk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_internal_ovk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_ovks_for_shielding.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_ovks_for_shielding.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_serialize.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_serialize.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaddressmetadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaddressmetadata.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaddressmetadata_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaddressmetadata_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_account.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_account.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_diversifier_index.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_diversifier_index.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashamount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashamount.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_new.argtypes = (
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_zero.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_zero.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashamount_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashamount_value.restype = ctypes.c_int64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashanchor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashanchor.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashanchor_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashanchor_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashanchor_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashanchor_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashbalance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashbalance.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashbalance_zero.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashbalance_zero.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashbalance_total.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashbalance_total.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockhash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockhash.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockhash_from_slice.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockhash_from_slice.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockheight.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockheight.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockheight_new.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockheight_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockheight_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockheight_value.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmeta.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmeta.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmeta_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmeta_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmeta_block_file_path.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmeta_block_file_path.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmetadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmetadata.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmetadata_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmetadata_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_hash.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_sapling_tree_size.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_sapling_tree_size.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttree.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttree.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttree_empty.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttree_empty.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttree_append.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttree_append.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttreeroot.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttreeroot.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttreeroot_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttreeroot_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_root_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_root_hash.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_subtree_end_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_subtree_end_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedoutput.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedoutput.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_account.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_account.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_index.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_index.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_memo.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_memo.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_note.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_note.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_transfer_type.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_transfer_type.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedtransaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedtransaction.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifiablefullviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifiablefullviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifiablefullviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifiablefullviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_change_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_change_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_decrypt_diversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_decrypt_diversifier.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_change_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_change_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_find_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_find_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_fvk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_fvk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ivk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ivk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_nk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_nk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ovk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ovk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifier.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifier_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifier_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifier_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifier_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifierindex.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifierindex.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u32.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u32.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u64.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_increment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_increment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_u32.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdustoutputpolicy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdustoutputpolicy.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdustoutputpolicy_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdustoutputpolicy_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_action.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_action.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_dust_threshold.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_dust_threshold.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexpandedspendingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexpandedspendingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_spending_key.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_spending_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_proof_generation_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_proof_generation_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedfullviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedfullviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_child.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_child.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_internal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_internal.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_find_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_find_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedprivkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedprivkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random_with_seed_size.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random_with_seed_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_with_seed.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_with_seed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_derive_private_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_derive_private_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedspendingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedspendingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_path.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_path.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_master.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_master.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_child.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_child.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_internal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_internal.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalivk.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexternalivk_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexternalivk_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_derive_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_derive_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalovk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalovk.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalovk_as_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalovk_as_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextractednotecommitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextractednotecommitment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextractednotecommitment_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextractednotecommitment_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextractednotecommitment_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextractednotecommitment_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedfeerule.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedfeerule.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_non_standard.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_non_standard.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_standard.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_standard.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfixedfeerule_fixed_fee.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfixedfeerule_fixed_fee.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedsingleoutputchangestrategy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedsingleoutputchangestrategy.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedsingleoutputchangestrategy_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedsingleoutputchangestrategy_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfsblockdb.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfsblockdb.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfsblockdb_for_path.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfsblockdb_for_path.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_find_block.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_find_block.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_get_max_cached_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_get_max_cached_height.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_initialize.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_initialize.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_write_block_metadata.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_write_block_metadata.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfullviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfullviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_expanded_spending_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_expanded_spending_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_ovk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_ovk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_vk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_vk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashincrementalwitness.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashincrementalwitness.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashincrementalwitness_from_tree.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashincrementalwitness_from_tree.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_append.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_append.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_path.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_path.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalivk.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashinternalivk_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashinternalivk_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalovk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalovk.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalovk_as_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalovk_as_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashjubjubfr.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashjubjubfr.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashjubjubfr_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashjubjubfr_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashjubjubfr_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashjubjubfr_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashkeyindex.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashkeyindex.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_index.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_index.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_u32.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_u32.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_hardened_from_normalize_index.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_hardened_from_normalize_index.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_is_valid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_is_valid.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_normalize_index.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_normalize_index.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_raw_index.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_raw_index.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashlocaltxprover.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashlocaltxprover.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_from_bytes.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_with_default_location.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_with_default_location.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainfixedgreedyinputselector.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainfixedgreedyinputselector.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainfixedgreedyinputselector_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainfixedgreedyinputselector_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainzip317greedyinputselector.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainzip317greedyinputselector.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainzip317greedyinputselector_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainzip317greedyinputselector_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmemobytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmemobytes.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_empty.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_empty.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashmemobytes_data.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashmemobytes_data.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnonnegativeamount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnonnegativeamount.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_nonnegative_i64.argtypes = (
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_nonnegative_i64.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_u64.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_zero.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_zero.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnonnegativeamount_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnonnegativeamount_value.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnoteid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnoteid.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnoteid_new.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint16,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnoteid_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnullifierderivingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnullifierderivingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnullifierderivingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnullifierderivingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnullifierderivingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnullifierderivingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaction.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cmx.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cmx.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cv_net.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cv_net.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_encrypted_note.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_encrypted_note.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_nullifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_nullifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaddress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaddress.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardaddress_from_raw_address_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardaddress_from_raw_address_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_diversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_diversifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_to_raw_address_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_to_raw_address_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardbundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardbundle.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_actions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_actions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_anchor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_anchor.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_keys.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_flags.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_flags.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_output_with_ovk.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_output_with_ovk.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_outputs_with_ovks.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_outputs_with_ovks.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_value_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_value_balance.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_verify_proof.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_verify_proof.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifier.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifier_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifier_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifier_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifier_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifierindex.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifierindex.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u32.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u32.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u64.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifierindex_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifierindex_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardflags.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardflags.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_byte.argtypes = (
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_byte.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_parts.argtypes = (
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_outputs_enabled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_outputs_enabled.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_spends_enabled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_spends_enabled.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_to_byte.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_to_byte.restype = ctypes.c_uint8
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardfullviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardfullviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardfullviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardfullviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address_at.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address_at.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_scope_for_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_scope_for_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ivk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ivk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ovk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ovk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardincomingviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardincomingviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardincomingviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardincomingviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address_at.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address_at.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_diversifier_index.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_diversifier_index.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklehash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklehash.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_cmx.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_cmx.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklehash_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklehash_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklepath.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklepath.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklepath_from_parts.argtypes = (
    ctypes.c_uint32,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklepath_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklepath_root.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklepath_root.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnote.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnote.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnote_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnote_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_commitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_commitment.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_recipient.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_recipient.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotecommitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotecommitment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotecommitment_to_extracted_note_commitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotecommitment_to_extracted_note_commitment.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotevalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotevalue.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnotevalue_from_raw.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnotevalue_from_raw.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotevalue_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotevalue_value.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnullifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnullifier.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnullifier_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnullifier_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnullifier_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnullifier_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardoutgoingviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardoutgoingviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardoutgoingviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardoutgoingviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardoutgoingviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardoutgoingviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardrandomseed.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardrandomseed.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardrandomseed_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardrandomseed_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardrandomseed_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardrandomseed_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardspendingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardspendingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_zip32_seed.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_zip32_seed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_fvk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_fvk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardtransactionbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardtransactionbuilder.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardtransactionbuilder_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardtransactionbuilder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_recipient.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_recipient.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_spend.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_spend.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_build.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_build.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardvaluecommitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardvaluecommitment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardvaluecommitment_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardvaluecommitment_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutpoint.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutpoint.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutpoint_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutpoint_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutgoingviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutgoingviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutgoingviewingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutgoingviewingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashoutgoingviewingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashoutgoingviewingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashpaymentaddress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashpaymentaddress.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_create_note.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_create_note.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_diversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_diversifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_pk_d.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_pk_d.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashproofgenerationkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashproofgenerationkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashproofgenerationkey_to_viewing_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashproofgenerationkey_to_viewing_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashprovingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashprovingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashprovingkey_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashprovingkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashratio.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashratio.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashratio_new.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashratio_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_denominator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_denominator.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_numerator.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_numerator.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivednoteid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivednoteid.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivedsaplingnote.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivedsaplingnote.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_diversifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_diversifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_internal_note_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_internal_note_id.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_note_commitment_tree_position.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_note_commitment_tree_position.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashrecipientaddress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashrecipientaddress.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_shielded.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_shielded.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_transparent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_transparent.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_unified.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_unified.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashrecipientaddress_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashrecipientaddress_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingbundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingbundle.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_outputs.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_outputs.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_spends.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_spends.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_value_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_value_balance.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingdiversifiedtransmissionkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingdiversifiedtransmissionkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingextractednotecommitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingextractednotecommitment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingextractednotecommitment_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingextractednotecommitment_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingextractednotecommitment_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingextractednotecommitment_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingivk.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_payment_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_payment_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_repr.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_repr.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmerklepath.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmerklepath.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_auth_path.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_auth_path.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_position.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_position.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmetadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmetadata.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingmetadata_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingmetadata_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_output_index.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_output_index.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_spend_index.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_spend_index.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnode.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnode.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnode_from_cmu.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnode_from_cmu.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnote.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnote.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnote_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnote_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_cmu.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_cmu.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnotevalue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnotevalue.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnotevalue_from_raw.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnotevalue_from_raw.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnotevalue_inner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnotevalue_inner.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnullifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnullifier.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnullifier_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnullifier_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingoutputdescription.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingoutputdescription.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cmu.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cmu.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cv.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cv.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingpublickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingpublickey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingpublickey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingpublickey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingspenddescription.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingspenddescription.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_anchor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_anchor.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_cv.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_cv.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_nullifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_nullifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_rk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_rk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingvaluecommitment.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingvaluecommitment.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingvaluecommitment_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingvaluecommitment_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscanrange.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscanrange.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscanrange_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscanrange_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_block_range.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_block_range.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_is_empty.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_is_empty.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_len.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_len.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_priority.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_priority.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscannedblock.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscannedblock.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscannedblock_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscannedblock_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_hash.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_time.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_time.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_commitments.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_commitments.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_nullifier_map.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_nullifier_map.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_transactions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_transactions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscript.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscript.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscript_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscript_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscript_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscript_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsenttransactionoutput.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsenttransactionoutput.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsenttransactionoutput_from_parts.argtypes = (
    ctypes.c_uint32,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsenttransactionoutput_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_memo.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_memo.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_output_index.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_output_index.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_recipient.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_recipient.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_sapling_change_to.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_sapling_change_to.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestfixedgreedyinputselector.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestfixedgreedyinputselector.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestfixedgreedyinputselector_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestfixedgreedyinputselector_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestzip317greedyinputselector.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestzip317greedyinputselector.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestzip317greedyinputselector_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestzip317greedyinputselector_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransaction.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransaction_from_bytes.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransaction_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_consensus_branch_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_consensus_branch_id.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_expiry_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_expiry_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_lock_time.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_lock_time.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_orchard_bundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_orchard_bundle.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_sapling_bundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_sapling_bundle.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_transparent_bundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_transparent_bundle.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_txid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_txid.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_version.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_version.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionbuilder.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionbuilder_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionbuilder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_output.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_output.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_spend.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_spend.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_input.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_input.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_output.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_output.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_build.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_build.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionrequest.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionrequest.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_empty.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_empty.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_from_uri.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_from_uri.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_payments.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_payments.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_to_uri.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_to_uri.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentaddress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentaddress.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_public_key.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_script.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_script.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_public_key.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_script.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_script.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_script.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_script.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentbundle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentbundle.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_is_coinbase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_is_coinbase.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vin.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vin.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vout.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vout.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtreestate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtreestate.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxid.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxid_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxid_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_hex_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_hex_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxin.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxin.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxin_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxin_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxout.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxout.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxout_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxout_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_recipient_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_recipient_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_script_pubkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_script_pubkey.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxversion.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxversion.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_from_bytes.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_suggested_for_branch.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_suggested_for_branch.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_orchard.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_orchard.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_overwinter.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_overwinter.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sapling.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sapling.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sprout.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sprout.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_header.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_header.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_selection.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_selection.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_version_group_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_version_group_id.restype = ctypes.c_uint32
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedaddress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedaddress.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_orchard.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_orchard.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_sapling.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_sapling.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_transparent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_transparent.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedfullviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedfullviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_decode.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_default_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_default_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_encode.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_encode.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_find_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_find_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_orchard.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_orchard.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_sapling.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_sapling.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_transparent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_transparent.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedspendingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedspendingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_bytes.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_seed.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_seed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_orchard.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_orchard.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_sapling.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_sapling.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_bytes.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_unified_full_viewing_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_unified_full_viewing_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_transparent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_transparent.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashverifyingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashverifyingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashverifyingkey_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashverifyingkey_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashviewingkey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashviewingkey.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_ivk.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_ivk.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_to_payment_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_to_payment_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletdb.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletdb.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletdb_for_path.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletdb_for_path.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_fully_scanned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_fully_scanned.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_max_scanned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_max_scanned.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_metadata.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_chain_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_chain_height.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_create_account.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_create_account.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_birthday.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_birthday.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_for_ufvk.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_for_ufvk.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_block_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_block_hash.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_current_address.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_current_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_max_height_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_max_height_hash.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_memo.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_memo.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_min_unspent_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_min_unspent_height.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_next_available_address.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_next_available_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_sapling_nullifiers.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_sapling_nullifiers.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_spendable_sapling_notes.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_spendable_sapling_notes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_target_and_anchor_heights.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_target_and_anchor_heights.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transaction.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_balances.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_balances.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_receivers.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_receivers.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_tx_height.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_tx_height.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unified_full_viewing_keys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unified_full_viewing_keys.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unspent_transparent_outputs.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unspent_transparent_outputs.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_birthday.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_birthday.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_summary.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_summary.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_initialize.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_initialize.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_is_valid_account_extfvk.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_is_valid_account_extfvk.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_blocks.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_blocks.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_received_transparent_utxo.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_received_transparent_utxo.restype = ctypes.c_int64
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_sapling_subtree_roots.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_sapling_subtree_roots.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_select_spendable_sapling_notes.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_select_spendable_sapling_notes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_decrypted_tx.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_decrypted_tx.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_sent_tx.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_sent_tx.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_suggest_scan_ranges.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_suggest_scan_ranges.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_truncate_to_height.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_truncate_to_height.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_update_chain_tip.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_update_chain_tip.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingoutput.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingoutput.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingspend.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingspend.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsummary.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsummary.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletsummary_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletsummary_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_account_balances.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_account_balances.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_chain_tip_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_chain_tip_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_fully_scanned_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_fully_scanned_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_is_synced.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_is_synced.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_scan_progress.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_scan_progress.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettransparentoutput.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettransparentoutput.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettransparentoutput_from_parts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettransparentoutput_from_parts.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_height.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_height.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_outpoint.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_outpoint.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_recipient_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_recipient_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_txout.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_txout.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_value.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_value.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettx.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettx.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettx_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettx_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317feerule.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317feerule.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_non_standard.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_non_standard.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_standard.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_standard.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashzip317feerule_marginal_fee.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashzip317feerule_marginal_fee.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317singleoutputchangestrategy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317singleoutputchangestrategy.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317singleoutputchangestrategy_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317singleoutputchangestrategy_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_full_viewing_key.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_full_viewing_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_spending_key.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_spending_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_payment_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_payment_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_transparent_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_transparent_address.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_and_store_transaction.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_and_store_transaction.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_transaction.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_transaction.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_full_viewing_key.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_full_viewing_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_spending_key.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_spending_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address_p.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address_p.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address_p.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address_p.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_zcash_fn_func_scan_cached_blocks.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_scan_cached_blocks.restype = None
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_fixed.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_fixed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_zip317.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_zip317.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_fixed.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_fixed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_zip317.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_zip317.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_fixed.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_fixed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_zip317.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_zip317.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_fixed.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_fixed.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_zip317.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_zip317.restype = ctypes.c_void_p
_UniffiLib.ffi_uniffi_zcash_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_zcash_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_zcash_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rustbuffer_free.restype = None
_UniffiLib.ffi_uniffi_zcash_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_zcash_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i8.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i16.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_u64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_u64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_i64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_i64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_f32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_f32.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_f64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_f64.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_pointer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_poll_void.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_cancel_void.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_uniffi_zcash_rust_future_free_void.restype = None
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_zcash_rust_future_complete_void.restype = None
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_extended_full_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_extended_full_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_extended_spending_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_extended_spending_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_payment_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_payment_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_transparent_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decode_transparent_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decrypt_and_store_transaction.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decrypt_and_store_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decrypt_transaction.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_decrypt_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_extended_full_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_extended_full_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_extended_spending_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_extended_spending_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_payment_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_payment_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_payment_address_p.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_payment_address_p.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address_p.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_encode_transparent_address_p.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_scan_cached_blocks.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_scan_cached_blocks.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_fixed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_fixed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_zip317.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_main_zip317.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_fixed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_fixed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_zip317.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_shield_transparent_funds_test_zip317.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_main_fixed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_main_fixed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_main_zip317.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_main_zip317.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_test_fixed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_test_fixed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_test_zip317.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_func_spend_test_zip317.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_secpsecretkey_serialize_secret.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_secpsecretkey_serialize_secret.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_string.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32_array.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u32_array.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64_array.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u64_array.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u8_array.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_testsupport_get_as_u8_array.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_sapling_spendable_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_sapling_spendable_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_total.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_total.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_unshielded.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbalance_unshielded.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_recover_until.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_recover_until.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_sapling_frontier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountbirthday_sapling_frontier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_external_secret_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_external_secret_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_internal_secret_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_derive_internal_secret_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_account_pubkey.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_account_pubkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountprivkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_external_ivk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_external_ivk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_internal_ivk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_derive_internal_ivk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_external_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_external_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_internal_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_internal_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_ovks_for_shielding.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_ovks_for_shielding.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_serialize.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaccountpubkey_serialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_account.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_diversifier_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashaddressmetadata_diversifier_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashamount_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashamount_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashanchor_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashanchor_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashbalance_total.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashbalance_total.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockheight_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockheight_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmeta_block_file_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmeta_block_file_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_hash.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_block_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_sapling_tree_size.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashblockmetadata_sapling_tree_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttree_append.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttree_append.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_root_hash.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_root_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_subtree_end_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashcommitmenttreeroot_subtree_end_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_account.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_memo.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_memo.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_note.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_note.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_transfer_type.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdecryptedoutput_transfer_type.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_change_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_change_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_decrypt_diversifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_decrypt_diversifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_change_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_diversified_change_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_find_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_find_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_fvk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_fvk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ivk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ivk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_nk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_nk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifiablefullviewingkey_to_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifier_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifier_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_increment.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_increment.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_u32.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdiversifierindex_to_u32.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_action.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_action.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_dust_threshold.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashdustoutputpolicy_dust_threshold.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_proof_generation_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_proof_generation_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexpandedspendingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_child.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_child.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_internal.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_derive_internal.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_find_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_find_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_derive_private_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_derive_private_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedprivkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_child.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_child.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_internal.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_derive_internal.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_derive_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_derive_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalivk_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalovk_as_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashexternalovk_as_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextractednotecommitment_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashextractednotecommitment_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfixedfeerule_fixed_fee.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfixedfeerule_fixed_fee.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_find_block.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_find_block.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_get_max_cached_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_get_max_cached_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_initialize.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_initialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_write_block_metadata.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfsblockdb_write_block_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_vk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashfullviewingkey_vk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_append.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_append.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashincrementalwitness_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalivk_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalovk_as_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashinternalovk_as_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashjubjubfr_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashjubjubfr_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_is_valid.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_is_valid.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_normalize_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_normalize_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_raw_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashkeyindex_raw_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashmemobytes_data.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashmemobytes_data.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashnonnegativeamount_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashnonnegativeamount_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashnullifierderivingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashnullifierderivingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cmx.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cmx.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cv_net.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_cv_net.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_encrypted_note.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_encrypted_note.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_nullifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaction_nullifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_diversifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_diversifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_to_raw_address_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardaddress_to_raw_address_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_actions.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_actions.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_anchor.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_anchor.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_keys.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_decrypt_output_with_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_flags.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_flags.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_output_with_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_output_with_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_outputs_with_ovks.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_recover_outputs_with_ovks.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_value_balance.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_value_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_verify_proof.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardbundle_verify_proof.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifier_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifier_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifierindex_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorcharddiversifierindex_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_outputs_enabled.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_outputs_enabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_spends_enabled.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_spends_enabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_to_byte.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardflags_to_byte.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address_at.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_address_at.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_scope_for_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_scope_for_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ivk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ivk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ovk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardfullviewingkey_to_ovk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address_at.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_address_at.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_diversifier_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_diversifier_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardincomingviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklehash_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklehash_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklepath_root.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardmerklepath_root.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_commitment.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_commitment.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_recipient.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_recipient.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnote_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotecommitment_to_extracted_note_commitment.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotecommitment_to_extracted_note_commitment.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotevalue_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnotevalue_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnullifier_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardnullifier_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardoutgoingviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardoutgoingviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardrandomseed_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardrandomseed_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_fvk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardspendingkey_to_fvk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_recipient.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_recipient.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_spend.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_add_spend.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_build.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardtransactionbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardvaluecommitment_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashorchardvaluecommitment_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashoutgoingviewingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashoutgoingviewingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_create_note.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_create_note.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_diversifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_diversifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_pk_d.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_pk_d.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashpaymentaddress_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashproofgenerationkey_to_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashproofgenerationkey_to_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashratio_denominator.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashratio_denominator.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashratio_numerator.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashratio_numerator.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_diversifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_diversifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_internal_note_id.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_internal_note_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_note_commitment_tree_position.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_note_commitment_tree_position.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashreceivedsaplingnote_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashrecipientaddress_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashrecipientaddress_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_outputs.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_outputs.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_spends.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_shielded_spends.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_value_balance.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingbundle_value_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingextractednotecommitment_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingextractednotecommitment_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_payment_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_payment_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_repr.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingivk_to_repr.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_auth_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_auth_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_position.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmerklepath_position.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_output_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_output_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_spend_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingmetadata_spend_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_cmu.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_cmu.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnote_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnotevalue_inner.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnotevalue_inner.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnullifier_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingnullifier_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cmu.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cmu.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cv.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingoutputdescription_cv.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingpublickey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingpublickey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_anchor.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_anchor.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_cv.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_cv.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_nullifier.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_nullifier.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_rk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingspenddescription_rk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingvaluecommitment_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsaplingvaluecommitment_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_block_range.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_block_range.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_is_empty.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_is_empty.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_len.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_len.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_priority.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscanrange_priority.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_hash.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_time.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_block_time.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_metadata.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_commitments.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_commitments.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_nullifier_map.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_sapling_nullifier_map.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_transactions.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscannedblock_transactions.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscript_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashscript_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_memo.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_memo.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_output_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_output_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_recipient.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_recipient.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_sapling_change_to.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_sapling_change_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashsenttransactionoutput_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_consensus_branch_id.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_consensus_branch_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_expiry_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_expiry_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_lock_time.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_lock_time.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_orchard_bundle.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_orchard_bundle.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_sapling_bundle.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_sapling_bundle.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_transparent_bundle.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_transparent_bundle.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_txid.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_txid.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_version.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransaction_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_output.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_output.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_spend.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_sapling_spend.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_input.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_input.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_output.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_add_transparent_output.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_build.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_payments.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_payments.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_to_uri.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransactionrequest_to_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_public_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_script.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_is_script.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_script.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_script.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentaddress_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_is_coinbase.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_is_coinbase.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vin.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vin.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vout.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtransparentbundle_vout.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_hex_string.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxid_to_hex_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxin_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxin_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_recipient_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_recipient_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_script_pubkey.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_script_pubkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxout_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_orchard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_orchard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_overwinter.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_overwinter.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sapling.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sapling.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sprout.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_has_sprout.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_header.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_header.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_selection.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_selection.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_version_group_id.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashtxversion_version_group_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_orchard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_orchard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_sapling.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_sapling.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_transparent.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedaddress_transparent.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_default_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_default_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_encode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_encode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_find_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_find_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_orchard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_orchard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_sapling.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_sapling.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_transparent.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedfullviewingkey_transparent.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_orchard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_orchard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_sapling.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_sapling.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_unified_full_viewing_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_to_unified_full_viewing_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_transparent.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashunifiedspendingkey_transparent.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_ivk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_ivk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_to_payment_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashviewingkey_to_payment_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_fully_scanned.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_fully_scanned.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_max_scanned.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_max_scanned.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_metadata.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_block_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_chain_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_chain_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_create_account.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_create_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_birthday.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_birthday.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_for_ufvk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_account_for_ufvk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_block_hash.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_block_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_current_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_current_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_max_height_hash.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_max_height_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_memo.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_memo.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_min_unspent_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_min_unspent_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_next_available_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_next_available_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_sapling_nullifiers.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_sapling_nullifiers.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_spendable_sapling_notes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_spendable_sapling_notes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_target_and_anchor_heights.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_target_and_anchor_heights.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transaction.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_balances.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_balances.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_receivers.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_transparent_receivers.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_tx_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_tx_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unified_full_viewing_keys.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unified_full_viewing_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unspent_transparent_outputs.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_unspent_transparent_outputs.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_birthday.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_birthday.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_summary.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_get_wallet_summary.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_initialize.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_initialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_is_valid_account_extfvk.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_is_valid_account_extfvk.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_blocks.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_blocks.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_received_transparent_utxo.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_received_transparent_utxo.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_sapling_subtree_roots.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_put_sapling_subtree_roots.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_select_spendable_sapling_notes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_select_spendable_sapling_notes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_decrypted_tx.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_decrypted_tx.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_sent_tx.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_store_sent_tx.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_suggest_scan_ranges.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_suggest_scan_ranges.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_truncate_to_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_truncate_to_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_update_chain_tip.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletdb_update_chain_tip.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_account_balances.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_account_balances.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_chain_tip_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_chain_tip_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_fully_scanned_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_fully_scanned_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_is_synced.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_is_synced.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_scan_progress.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwalletsummary_scan_progress.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_height.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_height.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_outpoint.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_outpoint.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_recipient_address.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_recipient_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_txout.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_txout.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_value.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashwallettransparentoutput_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashzip317feerule_marginal_fee.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_method_zcashzip317feerule_marginal_fee.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_secpsecretkey_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_secpsecretkey_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_testsupport_from_csv_file.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_testsupport_from_csv_file.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbalance_zero.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbalance_zero.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbirthday_from_treestate.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountbirthday_from_treestate.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_extended_privkey.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_extended_privkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_seed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountprivkey_from_seed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountpubkey_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaccountpubkey_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaddressmetadata_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashaddressmetadata_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_zero.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashamount_zero.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashanchor_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashanchor_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashbalance_zero.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashbalance_zero.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockhash_from_slice.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockhash_from_slice.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockheight_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockheight_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmeta_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmeta_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmetadata_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashblockmetadata_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttree_empty.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttree_empty.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttreeroot_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashcommitmenttreeroot_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifiablefullviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifiablefullviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifier_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifier_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u32.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u32.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u64.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_from_u64.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdiversifierindex_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdustoutputpolicy_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashdustoutputpolicy_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_spending_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexpandedspendingkey_from_spending_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedfullviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random_with_seed_size.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_random_with_seed_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_with_seed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedprivkey_with_seed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_from_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_master.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextendedspendingkey_master.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexternalivk_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashexternalivk_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextractednotecommitment_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashextractednotecommitment_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_non_standard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_non_standard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_standard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedfeerule_standard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedsingleoutputchangestrategy_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfixedsingleoutputchangestrategy_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfsblockdb_for_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfsblockdb_for_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_expanded_spending_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashfullviewingkey_from_expanded_spending_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashincrementalwitness_from_tree.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashincrementalwitness_from_tree.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashinternalivk_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashinternalivk_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashjubjubfr_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashjubjubfr_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_u32.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_from_u32.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_hardened_from_normalize_index.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashkeyindex_hardened_from_normalize_index.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_with_default_location.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashlocaltxprover_with_default_location.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmainfixedgreedyinputselector_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmainfixedgreedyinputselector_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmainzip317greedyinputselector_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmainzip317greedyinputselector_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_empty.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_empty.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashmemobytes_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_nonnegative_i64.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_nonnegative_i64.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_u64.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_from_u64.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_zero.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnonnegativeamount_zero.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnoteid_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnoteid_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnullifierderivingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashnullifierderivingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardaddress_from_raw_address_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardaddress_from_raw_address_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifier_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifier_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u32.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u32.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u64.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorcharddiversifierindex_from_u64.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_byte.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_byte.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardflags_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardfullviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardfullviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardincomingviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardincomingviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_cmx.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklehash_from_cmx.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklepath_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardmerklepath_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnote_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnote_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnotevalue_from_raw.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnotevalue_from_raw.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnullifier_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardnullifier_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardoutgoingviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardoutgoingviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardrandomseed_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardrandomseed_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_zip32_seed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardspendingkey_from_zip32_seed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardtransactionbuilder_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashorchardtransactionbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashoutpoint_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashoutpoint_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashoutgoingviewingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashoutgoingviewingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashpaymentaddress_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashprovingkey_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashprovingkey_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashratio_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashratio_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_shielded.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_shielded.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_transparent.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_transparent.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_unified.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashrecipientaddress_unified.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingextractednotecommitment_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingextractednotecommitment_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingmetadata_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingmetadata_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnode_from_cmu.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnode_from_cmu.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnote_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnote_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnotevalue_from_raw.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsaplingnotevalue_from_raw.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscanrange_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscanrange_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscannedblock_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscannedblock_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscript_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashscript_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsenttransactionoutput_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashsenttransactionoutput_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtestfixedgreedyinputselector_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtestfixedgreedyinputselector_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtestzip317greedyinputselector_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtestzip317greedyinputselector_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransaction_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransaction_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionbuilder_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_empty.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_empty.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_from_uri.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_from_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransactionrequest_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_public_key.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_script.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtransparentaddress_from_script.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtreestate_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxid_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxid_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxout_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxout_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_suggested_for_branch.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashtxversion_suggested_for_branch.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedaddress_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_decode.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedfullviewingkey_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_bytes.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_seed.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashunifiedspendingkey_from_seed.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashverifyingkey_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashverifyingkey_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletdb_for_path.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletdb_for_path.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletsummary_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwalletsummary_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettransparentoutput_from_parts.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettransparentoutput_from_parts.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettx_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashwallettx_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_non_standard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_non_standard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_standard.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317feerule_standard.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317singleoutputchangestrategy_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_zcash_checksum_constructor_zcashzip317singleoutputchangestrategy_new.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_zcash_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_uniffi_zcash_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i64(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class MerkleTreeFrontier:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreefrontier, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeMerkleTreeFrontier:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MerkleTreeFrontier):
            raise TypeError("Expected MerkleTreeFrontier instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MerkleTreeFrontier._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MerkleTreePosition:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeposition, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeMerkleTreePosition:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MerkleTreePosition):
            raise TypeError("Expected MerkleTreePosition instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MerkleTreePosition._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MerkleTreeRetention:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_merkletreeretention, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeMerkleTreeRetention:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MerkleTreeRetention):
            raise TypeError("Expected MerkleTreeRetention instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MerkleTreeRetention._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class SecpSecretKey:
    _pointer: ctypes.c_void_p
    def __init__(self, data: "typing.List[int]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_secpsecretkey_new,
        _UniffiConverterSequenceUInt8.lower(data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_secpsecretkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def serialize_secret(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_secpsecretkey_serialize_secret,self._pointer,)
        )






class _UniffiConverterTypeSecpSecretKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, SecpSecretKey):
            raise TypeError("Expected SecpSecretKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return SecpSecretKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TestSupport:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_testsupport, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_csv_file(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_testsupport_from_csv_file,)
        return cls._make_instance_(pointer)



    def get_as_string(self, key: "str") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_string,self._pointer,
        _UniffiConverterString.lower(key))
        )






    def get_as_u32(self, key: "str") -> "int":

        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32,self._pointer,
        _UniffiConverterString.lower(key))
        )






    def get_as_u32_array(self, key: "str") -> "typing.List[int]":

        return _UniffiConverterSequenceUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u32_array,self._pointer,
        _UniffiConverterString.lower(key))
        )






    def get_as_u64(self, key: "str") -> "int":

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64,self._pointer,
        _UniffiConverterString.lower(key))
        )






    def get_as_u64_array(self, key: "str") -> "typing.List[int]":

        return _UniffiConverterSequenceUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u64_array,self._pointer,
        _UniffiConverterString.lower(key))
        )






    def get_as_u8_array(self, key: "str") -> "typing.List[int]":

        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_testsupport_get_as_u8_array,self._pointer,
        _UniffiConverterString.lower(key))
        )






class _UniffiConverterTypeTestSupport:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TestSupport):
            raise TypeError("Expected TestSupport instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TestSupport._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TimeOffsetDateTime:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_timeoffsetdatetime, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeTimeOffsetDateTime:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TimeOffsetDateTime):
            raise TypeError("Expected TimeOffsetDateTime instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TimeOffsetDateTime._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAccountBalance:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbalance, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def zero(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbalance_zero,)
        return cls._make_instance_(pointer)



    def sapling_spendable_value(self, ) -> "ZcashNonNegativeAmount":
        return _UniffiConverterTypeZcashNonNegativeAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_sapling_spendable_value,self._pointer,)
        )






    def total(self, ) -> "ZcashNonNegativeAmount":
        return _UniffiConverterTypeZcashNonNegativeAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_total,self._pointer,)
        )






    def unshielded(self, ) -> "ZcashNonNegativeAmount":
        return _UniffiConverterTypeZcashNonNegativeAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbalance_unshielded,self._pointer,)
        )






class _UniffiConverterTypeZcashAccountBalance:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAccountBalance):
            raise TypeError("Expected ZcashAccountBalance instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAccountBalance._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAccountBirthday:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountbirthday, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_treestate(cls, treestate: "ZcashTreeState",recover_until: "typing.Optional[ZcashBlockHeight]"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountbirthday_from_treestate,
        _UniffiConverterTypeZcashTreeState.lower(treestate),
        _UniffiConverterOptionalTypeZcashBlockHeight.lower(recover_until))
        return cls._make_instance_(pointer)



    def height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_height,self._pointer,)
        )






    def recover_until(self, ) -> "typing.Optional[ZcashBlockHeight]":
        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_recover_until,self._pointer,)
        )






    def sapling_frontier(self, ) -> "MerkleTreeFrontier":
        return _UniffiConverterTypeMerkleTreeFrontier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountbirthday_sapling_frontier,self._pointer,)
        )






class _UniffiConverterTypeZcashAccountBirthday:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAccountBirthday):
            raise TypeError("Expected ZcashAccountBirthday instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAccountBirthday._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAccountPrivKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountprivkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def from_extended_privkey(cls, key: "ZcashExtendedPrivKey"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_extended_privkey,
        _UniffiConverterTypeZcashExtendedPrivKey.lower(key))
        return cls._make_instance_(pointer)


    @classmethod
    def from_seed(cls, params: "ZcashConsensusParameters",seed: "typing.List[int]",account_id: "ZcashAccountId"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountprivkey_from_seed,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterSequenceUInt8.lower(seed),
        _UniffiConverterTypeZcashAccountId.lower(account_id))
        return cls._make_instance_(pointer)



    def derive_external_secret_key(self, child_index: "int") -> "SecpSecretKey":

        return _UniffiConverterTypeSecpSecretKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_external_secret_key,self._pointer,
        _UniffiConverterUInt32.lower(child_index))
        )






    def derive_internal_secret_key(self, child_index: "int") -> "SecpSecretKey":

        return _UniffiConverterTypeSecpSecretKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_derive_internal_secret_key,self._pointer,
        _UniffiConverterUInt32.lower(child_index))
        )






    def to_account_pubkey(self, ) -> "ZcashAccountPubKey":
        return _UniffiConverterTypeZcashAccountPubKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_account_pubkey,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountprivkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashAccountPrivKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAccountPrivKey):
            raise TypeError("Expected ZcashAccountPrivKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAccountPrivKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAccountPubKey:
    _pointer: ctypes.c_void_p
    def __init__(self, data: "typing.List[int]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaccountpubkey_new,
        _UniffiConverterSequenceUInt8.lower(data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaccountpubkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def derive_external_ivk(self, ) -> "ZcashExternalIvk":
        return _UniffiConverterTypeZcashExternalIvk.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_external_ivk,self._pointer,)
        )






    def derive_internal_ivk(self, ) -> "ZcashInternalIvk":
        return _UniffiConverterTypeZcashInternalIvk.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_derive_internal_ivk,self._pointer,)
        )






    def external_ovk(self, ) -> "ZcashExternalOvk":
        return _UniffiConverterTypeZcashExternalOvk.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_external_ovk,self._pointer,)
        )






    def internal_ovk(self, ) -> "ZcashInternalOvk":
        return _UniffiConverterTypeZcashInternalOvk.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_internal_ovk,self._pointer,)
        )






    def ovks_for_shielding(self, ) -> "ZcashInternalOvkExternalOvk":
        return _UniffiConverterTypeZcashInternalOvkExternalOvk.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_ovks_for_shielding,self._pointer,)
        )






    def serialize(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaccountpubkey_serialize,self._pointer,)
        )






class _UniffiConverterTypeZcashAccountPubKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAccountPubKey):
            raise TypeError("Expected ZcashAccountPubKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAccountPubKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAddressMetadata:
    _pointer: ctypes.c_void_p
    def __init__(self, account: "ZcashAccountId",diversifier_index: "ZcashDiversifierIndex"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashaddressmetadata_new,
        _UniffiConverterTypeZcashAccountId.lower(account),
        _UniffiConverterTypeZcashDiversifierIndex.lower(diversifier_index))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashaddressmetadata, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def account(self, ) -> "ZcashAccountId":
        return _UniffiConverterTypeZcashAccountId.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_account,self._pointer,)
        )






    def diversifier_index(self, ) -> "ZcashDiversifierIndex":
        return _UniffiConverterTypeZcashDiversifierIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashaddressmetadata_diversifier_index,self._pointer,)
        )






class _UniffiConverterTypeZcashAddressMetadata:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAddressMetadata):
            raise TypeError("Expected ZcashAddressMetadata instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAddressMetadata._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAmount:
    _pointer: ctypes.c_void_p
    def __init__(self, amount: "int"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_new,
        _UniffiConverterInt64.lower(amount))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashamount, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def zero(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashamount_zero,)
        return cls._make_instance_(pointer)



    def value(self, ) -> "int":
        return _UniffiConverterInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashamount_value,self._pointer,)
        )






class _UniffiConverterTypeZcashAmount:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAmount):
            raise TypeError("Expected ZcashAmount instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAmount._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashAnchor:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashanchor, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashanchor_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashanchor_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashAnchor:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashAnchor):
            raise TypeError("Expected ZcashAnchor instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashAnchor._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashBalance:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashbalance, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def zero(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashbalance_zero,)
        return cls._make_instance_(pointer)



    def total(self, ) -> "ZcashNonNegativeAmount":
        return _UniffiConverterTypeZcashNonNegativeAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashbalance_total,self._pointer,)
        )






class _UniffiConverterTypeZcashBalance:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashBalance):
            raise TypeError("Expected ZcashBalance instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashBalance._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashBlockHash:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockhash, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_slice(cls, from_bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockhash_from_slice,
        _UniffiConverterSequenceUInt8.lower(from_bytes))
        return cls._make_instance_(pointer)



class _UniffiConverterTypeZcashBlockHash:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashBlockHash):
            raise TypeError("Expected ZcashBlockHash instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashBlockHash._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashBlockHeight:
    _pointer: ctypes.c_void_p
    def __init__(self, v: "int"):

        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockheight_new,
        _UniffiConverterUInt32.lower(v))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockheight, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def value(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockheight_value,self._pointer,)
        )






class _UniffiConverterTypeZcashBlockHeight:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashBlockHeight):
            raise TypeError("Expected ZcashBlockHeight instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashBlockHeight._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashBlockMeta:
    _pointer: ctypes.c_void_p
    def __init__(self, height: "ZcashBlockHeight",block_hash: "ZcashBlockHash",block_time: "int",sapling_outputs_count: "int",orchard_actions_count: "int"):





        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmeta_new,
        _UniffiConverterTypeZcashBlockHeight.lower(height),
        _UniffiConverterTypeZcashBlockHash.lower(block_hash),
        _UniffiConverterUInt32.lower(block_time),
        _UniffiConverterUInt32.lower(sapling_outputs_count),
        _UniffiConverterUInt32.lower(orchard_actions_count))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmeta, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def block_file_path(self, blocks_dir: "str") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmeta_block_file_path,self._pointer,
        _UniffiConverterString.lower(blocks_dir))
        )






class _UniffiConverterTypeZcashBlockMeta:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashBlockMeta):
            raise TypeError("Expected ZcashBlockMeta instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashBlockMeta._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashBlockMetadata:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashblockmetadata, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, block_height: "ZcashBlockHeight",block_hash: "ZcashBlockHash",sapling_tree_size: "int"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashblockmetadata_from_parts,
        _UniffiConverterTypeZcashBlockHeight.lower(block_height),
        _UniffiConverterTypeZcashBlockHash.lower(block_hash),
        _UniffiConverterUInt32.lower(sapling_tree_size))
        return cls._make_instance_(pointer)



    def block_hash(self, ) -> "ZcashBlockHash":
        return _UniffiConverterTypeZcashBlockHash.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_hash,self._pointer,)
        )






    def block_height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_block_height,self._pointer,)
        )






    def sapling_tree_size(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashblockmetadata_sapling_tree_size,self._pointer,)
        )






class _UniffiConverterTypeZcashBlockMetadata:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashBlockMetadata):
            raise TypeError("Expected ZcashBlockMetadata instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashBlockMetadata._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashCommitmentTree:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttree, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def empty(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttree_empty,)
        return cls._make_instance_(pointer)



    def append(self, node: "ZcashSaplingNode"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttree_append,self._pointer,
        _UniffiConverterTypeZcashSaplingNode.lower(node))







class _UniffiConverterTypeZcashCommitmentTree:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashCommitmentTree):
            raise TypeError("Expected ZcashCommitmentTree instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashCommitmentTree._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashCommitmentTreeRoot:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashcommitmenttreeroot, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, subtree_end_height: "ZcashBlockHeight",root_hash: "ZcashSaplingNode"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashcommitmenttreeroot_from_parts,
        _UniffiConverterTypeZcashBlockHeight.lower(subtree_end_height),
        _UniffiConverterTypeZcashSaplingNode.lower(root_hash))
        return cls._make_instance_(pointer)



    def root_hash(self, ) -> "ZcashSaplingNode":
        return _UniffiConverterTypeZcashSaplingNode.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_root_hash,self._pointer,)
        )






    def subtree_end_height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashcommitmenttreeroot_subtree_end_height,self._pointer,)
        )






class _UniffiConverterTypeZcashCommitmentTreeRoot:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashCommitmentTreeRoot):
            raise TypeError("Expected ZcashCommitmentTreeRoot instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashCommitmentTreeRoot._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDecryptedOutput:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedoutput, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def account(self, ) -> "ZcashAccountId":
        return _UniffiConverterTypeZcashAccountId.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_account,self._pointer,)
        )






    def index(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_index,self._pointer,)
        )






    def memo(self, ) -> "ZcashMemoBytes":
        return _UniffiConverterTypeZcashMemoBytes.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_memo,self._pointer,)
        )






    def note(self, ) -> "ZcashSaplingNote":
        return _UniffiConverterTypeZcashSaplingNote.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_note,self._pointer,)
        )






    def transfer_type(self, ) -> "ZcashTransferType":
        return _UniffiConverterTypeZcashTransferType.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdecryptedoutput_transfer_type,self._pointer,)
        )






class _UniffiConverterTypeZcashDecryptedOutput:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDecryptedOutput):
            raise TypeError("Expected ZcashDecryptedOutput instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDecryptedOutput._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDecryptedTransaction:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdecryptedtransaction, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashDecryptedTransaction:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDecryptedTransaction):
            raise TypeError("Expected ZcashDecryptedTransaction instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDecryptedTransaction._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDiversifiableFullViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifiablefullviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifiablefullviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def change_address(self, ) -> "ZcashDiversifierIndexAndPaymentAddress":
        return _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_change_address,self._pointer,)
        )






    def decrypt_diversifier(self, addr: "ZcashPaymentAddress") -> "typing.Optional[ZcashDiversifierIndexAndScope]":

        return _UniffiConverterOptionalTypeZcashDiversifierIndexAndScope.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_decrypt_diversifier,self._pointer,
        _UniffiConverterTypeZcashPaymentAddress.lower(addr))
        )






    def default_address(self, ) -> "ZcashDiversifierIndexAndPaymentAddress":
        return _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_default_address,self._pointer,)
        )






    def diversified_address(self, diversifier: "ZcashDiversifier") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_address,self._pointer,
        _UniffiConverterTypeZcashDiversifier.lower(diversifier))
        )






    def diversified_change_address(self, diversifier: "ZcashDiversifier") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_diversified_change_address,self._pointer,
        _UniffiConverterTypeZcashDiversifier.lower(diversifier))
        )






    def find_address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashDiversifierIndexAndPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_find_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def fvk(self, ) -> "ZcashFullViewingKey":
        return _UniffiConverterTypeZcashFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_fvk,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_bytes,self._pointer,)
        )






    def to_ivk(self, scope: "ZcashScope") -> "ZcashSaplingIvk":

        return _UniffiConverterTypeZcashSaplingIvk.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ivk,self._pointer,
        _UniffiConverterTypeZcashScope.lower(scope))
        )






    def to_nk(self, scope: "ZcashScope") -> "ZcashNullifierDerivingKey":

        return _UniffiConverterTypeZcashNullifierDerivingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_nk,self._pointer,
        _UniffiConverterTypeZcashScope.lower(scope))
        )






    def to_ovk(self, scope: "ZcashScope") -> "ZcashOutgoingViewingKey":

        return _UniffiConverterTypeZcashOutgoingViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifiablefullviewingkey_to_ovk,self._pointer,
        _UniffiConverterTypeZcashScope.lower(scope))
        )






class _UniffiConverterTypeZcashDiversifiableFullViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDiversifiableFullViewingKey):
            raise TypeError("Expected ZcashDiversifiableFullViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDiversifiableFullViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDiversifier:
    _pointer: ctypes.c_void_p
    def __init__(self, bytes: "typing.List[int]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifier_new,
        _UniffiConverterSequenceUInt8.lower(bytes))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifier, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifier_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashDiversifier:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDiversifier):
            raise TypeError("Expected ZcashDiversifier instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDiversifier._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDiversifierIndex:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdiversifierindex, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_u32(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u32,
        _UniffiConverterUInt32.lower(i))
        return cls._make_instance_(pointer)


    @classmethod
    def from_u64(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdiversifierindex_from_u64,
        _UniffiConverterUInt64.lower(i))
        return cls._make_instance_(pointer)



    def increment(self, ):
        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_increment,self._pointer,)







    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_bytes,self._pointer,)
        )






    def to_u32(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdiversifierindex_to_u32,self._pointer,)
        )






class _UniffiConverterTypeZcashDiversifierIndex:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDiversifierIndex):
            raise TypeError("Expected ZcashDiversifierIndex instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDiversifierIndex._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashDustOutputPolicy:
    _pointer: ctypes.c_void_p
    def __init__(self, action: "ZcashDustAction",dust_threshold: "typing.Optional[ZcashAmount]"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashdustoutputpolicy_new,
        _UniffiConverterTypeZcashDustAction.lower(action),
        _UniffiConverterOptionalTypeZcashAmount.lower(dust_threshold))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashdustoutputpolicy, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def action(self, ) -> "ZcashDustAction":
        return _UniffiConverterTypeZcashDustAction.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_action,self._pointer,)
        )






    def dust_threshold(self, ) -> "typing.Optional[ZcashAmount]":
        return _UniffiConverterOptionalTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashdustoutputpolicy_dust_threshold,self._pointer,)
        )






class _UniffiConverterTypeZcashDustOutputPolicy:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashDustOutputPolicy):
            raise TypeError("Expected ZcashDustOutputPolicy instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashDustOutputPolicy._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExpandedSpendingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexpandedspendingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, b: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(b))
        return cls._make_instance_(pointer)


    @classmethod
    def from_spending_key(cls, sk: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexpandedspendingkey_from_spending_key,
        _UniffiConverterSequenceUInt8.lower(sk))
        return cls._make_instance_(pointer)



    def proof_generation_key(self, ) -> "ZcashProofGenerationKey":
        return _UniffiConverterTypeZcashProofGenerationKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_proof_generation_key,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexpandedspendingkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashExpandedSpendingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExpandedSpendingKey):
            raise TypeError("Expected ZcashExpandedSpendingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExpandedSpendingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExtendedFullViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedfullviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",input: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(input))
        return cls._make_instance_(pointer)


    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedfullviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def default_address(self, ) -> "ZcashDiversifierIndexAndPaymentAddress":
        return _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_default_address,self._pointer,)
        )






    def derive_child(self, i: "ZcashChildIndex") -> "ZcashExtendedFullViewingKey":

        return _UniffiConverterTypeZcashExtendedFullViewingKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_child,self._pointer,
        _UniffiConverterTypeZcashChildIndex.lower(i))
        )






    def derive_internal(self, ) -> "ZcashExtendedFullViewingKey":
        return _UniffiConverterTypeZcashExtendedFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_derive_internal,self._pointer,)
        )






    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def find_address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashDiversifierIndexAndPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_find_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_bytes,self._pointer,)
        )






    def to_diversifiable_full_viewing_key(self, ) -> "ZcashDiversifiableFullViewingKey":
        return _UniffiConverterTypeZcashDiversifiableFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedfullviewingkey_to_diversifiable_full_viewing_key,self._pointer,)
        )






class _UniffiConverterTypeZcashExtendedFullViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExtendedFullViewingKey):
            raise TypeError("Expected ZcashExtendedFullViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExtendedFullViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExtendedPrivKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedprivkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)


    @classmethod
    def random(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random,)
        return cls._make_instance_(pointer)


    @classmethod
    def random_with_seed_size(cls, seed_size: "ZcashKeySeed"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_random_with_seed_size,
        _UniffiConverterTypeZcashKeySeed.lower(seed_size))
        return cls._make_instance_(pointer)


    @classmethod
    def with_seed(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedprivkey_with_seed,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def derive_private_key(self, key_index: "ZcashKeyIndex") -> "ZcashExtendedPrivKey":

        return _UniffiConverterTypeZcashExtendedPrivKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_derive_private_key,self._pointer,
        _UniffiConverterTypeZcashKeyIndex.lower(key_index))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedprivkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashExtendedPrivKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExtendedPrivKey):
            raise TypeError("Expected ZcashExtendedPrivKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExtendedPrivKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExtendedSpendingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextendedspendingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",input: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(input))
        return cls._make_instance_(pointer)


    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def from_path(cls, master: "ZcashExtendedSpendingKey",path: "typing.List[ZcashChildIndex]"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_from_path,
        _UniffiConverterTypeZcashExtendedSpendingKey.lower(master),
        _UniffiConverterSequenceTypeZcashChildIndex.lower(path))
        return cls._make_instance_(pointer)


    @classmethod
    def master(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextendedspendingkey_master,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def default_address(self, ) -> "ZcashDiversifierIndexAndPaymentAddress":
        return _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_default_address,self._pointer,)
        )






    def derive_child(self, index: "ZcashChildIndex") -> "ZcashExtendedSpendingKey":

        return _UniffiConverterTypeZcashExtendedSpendingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_child,self._pointer,
        _UniffiConverterTypeZcashChildIndex.lower(index))
        )






    def derive_internal(self, ) -> "ZcashExtendedSpendingKey":
        return _UniffiConverterTypeZcashExtendedSpendingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_derive_internal,self._pointer,)
        )






    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_bytes,self._pointer,)
        )






    def to_diversifiable_full_viewing_key(self, ) -> "ZcashDiversifiableFullViewingKey":
        return _UniffiConverterTypeZcashDiversifiableFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextendedspendingkey_to_diversifiable_full_viewing_key,self._pointer,)
        )






class _UniffiConverterTypeZcashExtendedSpendingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExtendedSpendingKey):
            raise TypeError("Expected ZcashExtendedSpendingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExtendedSpendingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExternalIvk:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalivk, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashexternalivk_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def default_address(self, ) -> "ZcashTransparentAddressAndIndex":
        return _UniffiConverterTypeZcashTransparentAddressAndIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_default_address,self._pointer,)
        )






    def derive_address(self, child_index: "int") -> "ZcashTransparentAddress":

        return _UniffiConverterTypeZcashTransparentAddress.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_derive_address,self._pointer,
        _UniffiConverterUInt32.lower(child_index))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalivk_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashExternalIvk:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExternalIvk):
            raise TypeError("Expected ZcashExternalIvk instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExternalIvk._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExternalOvk:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashexternalovk, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def as_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashexternalovk_as_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashExternalOvk:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExternalOvk):
            raise TypeError("Expected ZcashExternalOvk instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExternalOvk._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashExtractedNoteCommitment:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashextractednotecommitment, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashextractednotecommitment_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashextractednotecommitment_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashExtractedNoteCommitment:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashExtractedNoteCommitment):
            raise TypeError("Expected ZcashExtractedNoteCommitment instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashExtractedNoteCommitment._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashFixedFeeRule:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedfeerule, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def non_standard(cls, fixed_fee: "ZcashAmount"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_non_standard,
        _UniffiConverterTypeZcashAmount.lower(fixed_fee))
        return cls._make_instance_(pointer)


    @classmethod
    def standard(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedfeerule_standard,)
        return cls._make_instance_(pointer)



    def fixed_fee(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfixedfeerule_fixed_fee,self._pointer,)
        )






class _UniffiConverterTypeZcashFixedFeeRule:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashFixedFeeRule):
            raise TypeError("Expected ZcashFixedFeeRule instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashFixedFeeRule._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashFixedSingleOutputChangeStrategy:
    _pointer: ctypes.c_void_p
    def __init__(self, fee_rule: "ZcashFixedFeeRule"):

        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfixedsingleoutputchangestrategy_new,
        _UniffiConverterTypeZcashFixedFeeRule.lower(fee_rule))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfixedsingleoutputchangestrategy, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashFixedSingleOutputChangeStrategy:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashFixedSingleOutputChangeStrategy):
            raise TypeError("Expected ZcashFixedSingleOutputChangeStrategy instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashFixedSingleOutputChangeStrategy._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashFsBlockDb:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfsblockdb, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def for_path(cls, fsblockdb_root: "str"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfsblockdb_for_path,
        _UniffiConverterString.lower(fsblockdb_root))
        return cls._make_instance_(pointer)



    def find_block(self, height: "ZcashBlockHeight") -> "typing.Optional[ZcashBlockMeta]":

        return _UniffiConverterOptionalTypeZcashBlockMeta.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_find_block,self._pointer,
        _UniffiConverterTypeZcashBlockHeight.lower(height))
        )






    def get_max_cached_height(self, ) -> "typing.Optional[ZcashBlockHeight]":
        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_get_max_cached_height,self._pointer,)
        )






    def initialize(self, blocks_dir: "str"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_initialize,self._pointer,
        _UniffiConverterString.lower(blocks_dir))







    def write_block_metadata(self, block_meta: "typing.List[ZcashBlockMeta]"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfsblockdb_write_block_metadata,self._pointer,
        _UniffiConverterSequenceTypeZcashBlockMeta.lower(block_meta))







class _UniffiConverterTypeZcashFsBlockDb:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashFsBlockDb):
            raise TypeError("Expected ZcashFsBlockDb instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashFsBlockDb._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashFullViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashfullviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)


    @classmethod
    def from_expanded_spending_key(cls, expsk: "ZcashExpandedSpendingKey"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashfullviewingkey_from_expanded_spending_key,
        _UniffiConverterTypeZcashExpandedSpendingKey.lower(expsk))
        return cls._make_instance_(pointer)



    def ovk(self, ) -> "ZcashOutgoingViewingKey":
        return _UniffiConverterTypeZcashOutgoingViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_ovk,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_to_bytes,self._pointer,)
        )






    def vk(self, ) -> "ZcashViewingKey":
        return _UniffiConverterTypeZcashViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashfullviewingkey_vk,self._pointer,)
        )






class _UniffiConverterTypeZcashFullViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashFullViewingKey):
            raise TypeError("Expected ZcashFullViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashFullViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashIncrementalWitness:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashincrementalwitness, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_tree(cls, tree: "ZcashCommitmentTree"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashincrementalwitness_from_tree,
        _UniffiConverterTypeZcashCommitmentTree.lower(tree))
        return cls._make_instance_(pointer)



    def append(self, node: "ZcashSaplingNode"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_append,self._pointer,
        _UniffiConverterTypeZcashSaplingNode.lower(node))







    def path(self, ) -> "typing.Optional[ZcashSaplingMerklePath]":
        return _UniffiConverterOptionalTypeZcashSaplingMerklePath.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashincrementalwitness_path,self._pointer,)
        )






class _UniffiConverterTypeZcashIncrementalWitness:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashIncrementalWitness):
            raise TypeError("Expected ZcashIncrementalWitness instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashIncrementalWitness._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashInternalIvk:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalivk, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashinternalivk_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def default_address(self, ) -> "ZcashTransparentAddressAndIndex":
        return _UniffiConverterTypeZcashTransparentAddressAndIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_default_address,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalivk_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashInternalIvk:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashInternalIvk):
            raise TypeError("Expected ZcashInternalIvk instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashInternalIvk._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashInternalOvk:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashinternalovk, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def as_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashinternalovk_as_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashInternalOvk:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashInternalOvk):
            raise TypeError("Expected ZcashInternalOvk instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashInternalOvk._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashJubjubFr:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashjubjubfr, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashjubjubfr_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashjubjubfr_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashJubjubFr:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashJubjubFr):
            raise TypeError("Expected ZcashJubjubFr instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashJubjubFr._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashKeyIndex:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashkeyindex, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_index(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_index,
        _UniffiConverterUInt32.lower(i))
        return cls._make_instance_(pointer)


    @classmethod
    def from_u32(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_from_u32,
        _UniffiConverterUInt32.lower(i))
        return cls._make_instance_(pointer)


    @classmethod
    def hardened_from_normalize_index(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashkeyindex_hardened_from_normalize_index,
        _UniffiConverterUInt32.lower(i))
        return cls._make_instance_(pointer)



    def is_valid(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_is_valid,self._pointer,)
        )






    def normalize_index(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_normalize_index,self._pointer,)
        )






    def raw_index(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashkeyindex_raw_index,self._pointer,)
        )






class _UniffiConverterTypeZcashKeyIndex:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashKeyIndex):
            raise TypeError("Expected ZcashKeyIndex instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashKeyIndex._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashLocalTxProver:
    _pointer: ctypes.c_void_p
    def __init__(self, spend_path: "str",output_path: "str"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_new,
        _UniffiConverterString.lower(spend_path),
        _UniffiConverterString.lower(output_path))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashlocaltxprover, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, spend_param_bytes: "typing.List[int]",output_param_bytes: "typing.List[int]"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_from_bytes,
        _UniffiConverterSequenceUInt8.lower(spend_param_bytes),
        _UniffiConverterSequenceUInt8.lower(output_param_bytes))
        return cls._make_instance_(pointer)


    @classmethod
    def with_default_location(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashlocaltxprover_with_default_location,)
        return cls._make_instance_(pointer)



class _UniffiConverterTypeZcashLocalTxProver:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashLocalTxProver):
            raise TypeError("Expected ZcashLocalTxProver instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashLocalTxProver._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashMainFixedGreedyInputSelector:
    _pointer: ctypes.c_void_p
    def __init__(self, change_strategy: "ZcashFixedSingleOutputChangeStrategy",dust_output_policy: "ZcashDustOutputPolicy"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainfixedgreedyinputselector_new,
        _UniffiConverterTypeZcashFixedSingleOutputChangeStrategy.lower(change_strategy),
        _UniffiConverterTypeZcashDustOutputPolicy.lower(dust_output_policy))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainfixedgreedyinputselector, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashMainFixedGreedyInputSelector:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashMainFixedGreedyInputSelector):
            raise TypeError("Expected ZcashMainFixedGreedyInputSelector instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashMainFixedGreedyInputSelector._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashMainZip317GreedyInputSelector:
    _pointer: ctypes.c_void_p
    def __init__(self, change_strategy: "ZcashZip317SingleOutputChangeStrategy",dust_output_policy: "ZcashDustOutputPolicy"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmainzip317greedyinputselector_new,
        _UniffiConverterTypeZcashZip317SingleOutputChangeStrategy.lower(change_strategy),
        _UniffiConverterTypeZcashDustOutputPolicy.lower(dust_output_policy))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmainzip317greedyinputselector, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashMainZip317GreedyInputSelector:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashMainZip317GreedyInputSelector):
            raise TypeError("Expected ZcashMainZip317GreedyInputSelector instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashMainZip317GreedyInputSelector._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashMemoBytes:
    _pointer: ctypes.c_void_p
    def __init__(self, data: "typing.List[int]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_new,
        _UniffiConverterSequenceUInt8.lower(data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashmemobytes, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def empty(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashmemobytes_empty,)
        return cls._make_instance_(pointer)



    def data(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashmemobytes_data,self._pointer,)
        )






class _UniffiConverterTypeZcashMemoBytes:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashMemoBytes):
            raise TypeError("Expected ZcashMemoBytes instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashMemoBytes._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashNonNegativeAmount:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnonnegativeamount, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_nonnegative_i64(cls, amount: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_nonnegative_i64,
        _UniffiConverterInt64.lower(amount))
        return cls._make_instance_(pointer)


    @classmethod
    def from_u64(cls, amount: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_from_u64,
        _UniffiConverterUInt64.lower(amount))
        return cls._make_instance_(pointer)


    @classmethod
    def zero(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnonnegativeamount_zero,)
        return cls._make_instance_(pointer)



    def value(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnonnegativeamount_value,self._pointer,)
        )






class _UniffiConverterTypeZcashNonNegativeAmount:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashNonNegativeAmount):
            raise TypeError("Expected ZcashNonNegativeAmount instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashNonNegativeAmount._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashNoteId:
    _pointer: ctypes.c_void_p
    def __init__(self, txid: "ZcashTxId",zsp: "ZcashShieldedProtocol",output_index: "int"):



        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnoteid_new,
        _UniffiConverterTypeZcashTxId.lower(txid),
        _UniffiConverterTypeZcashShieldedProtocol.lower(zsp),
        _UniffiConverterUInt16.lower(output_index))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnoteid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashNoteId:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashNoteId):
            raise TypeError("Expected ZcashNoteId instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashNoteId._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashNullifierDerivingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashnullifierderivingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashnullifierderivingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashnullifierderivingkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashNullifierDerivingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashNullifierDerivingKey):
            raise TypeError("Expected ZcashNullifierDerivingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashNullifierDerivingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardAction:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaction, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def cmx(self, ) -> "ZcashExtractedNoteCommitment":
        return _UniffiConverterTypeZcashExtractedNoteCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cmx,self._pointer,)
        )






    def cv_net(self, ) -> "ZcashOrchardValueCommitment":
        return _UniffiConverterTypeZcashOrchardValueCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_cv_net,self._pointer,)
        )






    def encrypted_note(self, ) -> "ZcashOrchardTransmittedNoteCiphertext":
        return _UniffiConverterTypeZcashOrchardTransmittedNoteCiphertext.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_encrypted_note,self._pointer,)
        )






    def nullifier(self, ) -> "ZcashOrchardNullifier":
        return _UniffiConverterTypeZcashOrchardNullifier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaction_nullifier,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardAction:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardAction):
            raise TypeError("Expected ZcashOrchardAction instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardAction._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardAddress:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardaddress, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_raw_address_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardaddress_from_raw_address_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def diversifier(self, ) -> "ZcashOrchardDiversifier":
        return _UniffiConverterTypeZcashOrchardDiversifier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_diversifier,self._pointer,)
        )






    def to_raw_address_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardaddress_to_raw_address_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardAddress):
            raise TypeError("Expected ZcashOrchardAddress instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardAddress._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardBundle:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardbundle, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def actions(self, ) -> "typing.List[ZcashOrchardAction]":
        return _UniffiConverterSequenceTypeZcashOrchardAction.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_actions,self._pointer,)
        )






    def anchor(self, ) -> "ZcashAnchor":
        return _UniffiConverterTypeZcashAnchor.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_anchor,self._pointer,)
        )






    def decrypt_output_with_key(self, action_idx: "int",ivk: "ZcashOrchardIncomingViewingKey") -> "ZcashOrchardDecryptOutput":


        return _UniffiConverterTypeZcashOrchardDecryptOutput.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_key,self._pointer,
        _UniffiConverterUInt64.lower(action_idx),
        _UniffiConverterTypeZcashOrchardIncomingViewingKey.lower(ivk))
        )






    def decrypt_output_with_keys(self, ivks: "typing.List[ZcashOrchardIncomingViewingKey]") -> "typing.List[ZcashOrchardDecryptOutputForIncomingKeys]":

        return _UniffiConverterSequenceTypeZcashOrchardDecryptOutputForIncomingKeys.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_decrypt_output_with_keys,self._pointer,
        _UniffiConverterSequenceTypeZcashOrchardIncomingViewingKey.lower(ivks))
        )






    def flags(self, ) -> "ZcashOrchardFlags":
        return _UniffiConverterTypeZcashOrchardFlags.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_flags,self._pointer,)
        )






    def recover_output_with_ovk(self, action_idx: "int",ovk: "ZcashOrchardOutgoingViewingKey") -> "ZcashOrchardDecryptOutput":


        return _UniffiConverterTypeZcashOrchardDecryptOutput.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_output_with_ovk,self._pointer,
        _UniffiConverterUInt64.lower(action_idx),
        _UniffiConverterTypeZcashOrchardOutgoingViewingKey.lower(ovk))
        )






    def recover_outputs_with_ovks(self, ovks: "typing.List[ZcashOrchardOutgoingViewingKey]") -> "typing.List[ZcashOrchardDecryptOutputForOutgoingKeys]":

        return _UniffiConverterSequenceTypeZcashOrchardDecryptOutputForOutgoingKeys.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_recover_outputs_with_ovks,self._pointer,
        _UniffiConverterSequenceTypeZcashOrchardOutgoingViewingKey.lower(ovks))
        )






    def value_balance(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_value_balance,self._pointer,)
        )






    def verify_proof(self, key: "ZcashVerifyingKey"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardbundle_verify_proof,self._pointer,
        _UniffiConverterTypeZcashVerifyingKey.lower(key))







class _UniffiConverterTypeZcashOrchardBundle:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardBundle):
            raise TypeError("Expected ZcashOrchardBundle instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardBundle._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardDiversifier:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifier, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifier_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifier_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardDiversifier:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardDiversifier):
            raise TypeError("Expected ZcashOrchardDiversifier instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardDiversifier._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardDiversifierIndex:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorcharddiversifierindex, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, b: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_bytes,
        _UniffiConverterSequenceUInt8.lower(b))
        return cls._make_instance_(pointer)


    @classmethod
    def from_u32(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u32,
        _UniffiConverterUInt32.lower(i))
        return cls._make_instance_(pointer)


    @classmethod
    def from_u64(cls, i: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorcharddiversifierindex_from_u64,
        _UniffiConverterUInt64.lower(i))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorcharddiversifierindex_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardDiversifierIndex:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardDiversifierIndex):
            raise TypeError("Expected ZcashOrchardDiversifierIndex instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardDiversifierIndex._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardFlags:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardflags, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_byte(cls, v: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_byte,
        _UniffiConverterUInt8.lower(v))
        return cls._make_instance_(pointer)


    @classmethod
    def from_parts(cls, spends_enabled: "bool",outputs_enabled: "bool"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardflags_from_parts,
        _UniffiConverterBool.lower(spends_enabled),
        _UniffiConverterBool.lower(outputs_enabled))
        return cls._make_instance_(pointer)



    def outputs_enabled(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_outputs_enabled,self._pointer,)
        )






    def spends_enabled(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_spends_enabled,self._pointer,)
        )






    def to_byte(self, ) -> "int":
        return _UniffiConverterUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardflags_to_byte,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardFlags:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardFlags):
            raise TypeError("Expected ZcashOrchardFlags instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardFlags._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardFullViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardfullviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardfullviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def address(self, d: "ZcashOrchardDiversifier",scope: "ZcashOrchardScope") -> "ZcashOrchardAddress":


        return _UniffiConverterTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address,self._pointer,
        _UniffiConverterTypeZcashOrchardDiversifier.lower(d),
        _UniffiConverterTypeZcashOrchardScope.lower(scope))
        )






    def address_at(self, j: "ZcashOrchardDiversifierIndex",scope: "ZcashOrchardScope") -> "ZcashOrchardAddress":


        return _UniffiConverterTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_address_at,self._pointer,
        _UniffiConverterTypeZcashOrchardDiversifierIndex.lower(j),
        _UniffiConverterTypeZcashOrchardScope.lower(scope))
        )






    def scope_for_address(self, address: "ZcashOrchardAddress") -> "typing.Optional[ZcashOrchardScope]":

        return _UniffiConverterOptionalTypeZcashOrchardScope.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_scope_for_address,self._pointer,
        _UniffiConverterTypeZcashOrchardAddress.lower(address))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_bytes,self._pointer,)
        )






    def to_ivk(self, scope: "ZcashOrchardScope") -> "ZcashOrchardIncomingViewingKey":

        return _UniffiConverterTypeZcashOrchardIncomingViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ivk,self._pointer,
        _UniffiConverterTypeZcashOrchardScope.lower(scope))
        )






    def to_ovk(self, scope: "ZcashOrchardScope") -> "ZcashOrchardOutgoingViewingKey":

        return _UniffiConverterTypeZcashOrchardOutgoingViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardfullviewingkey_to_ovk,self._pointer,
        _UniffiConverterTypeZcashOrchardScope.lower(scope))
        )






class _UniffiConverterTypeZcashOrchardFullViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardFullViewingKey):
            raise TypeError("Expected ZcashOrchardFullViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardFullViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardIncomingViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardincomingviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardincomingviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def address(self, diversifier: "ZcashOrchardDiversifier") -> "ZcashOrchardAddress":

        return _UniffiConverterTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address,self._pointer,
        _UniffiConverterTypeZcashOrchardDiversifier.lower(diversifier))
        )






    def address_at(self, j: "ZcashOrchardDiversifierIndex") -> "ZcashOrchardAddress":

        return _UniffiConverterTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_address_at,self._pointer,
        _UniffiConverterTypeZcashOrchardDiversifierIndex.lower(j))
        )






    def diversifier_index(self, addr: "ZcashOrchardAddress") -> "typing.Optional[ZcashOrchardDiversifierIndex]":

        return _UniffiConverterOptionalTypeZcashOrchardDiversifierIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_diversifier_index,self._pointer,
        _UniffiConverterTypeZcashOrchardAddress.lower(addr))
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardincomingviewingkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardIncomingViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardIncomingViewingKey):
            raise TypeError("Expected ZcashOrchardIncomingViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardIncomingViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardMerkleHash:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklehash, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def from_cmx(cls, cmx: "ZcashExtractedNoteCommitment"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklehash_from_cmx,
        _UniffiConverterTypeZcashExtractedNoteCommitment.lower(cmx))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklehash_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardMerkleHash:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardMerkleHash):
            raise TypeError("Expected ZcashOrchardMerkleHash instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardMerkleHash._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardMerklePath:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardmerklepath, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, position: "int",auth_path: "typing.List[ZcashOrchardMerkleHash]"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardmerklepath_from_parts,
        _UniffiConverterUInt32.lower(position),
        _UniffiConverterSequenceTypeZcashOrchardMerkleHash.lower(auth_path))
        return cls._make_instance_(pointer)



    def root(self, cmx: "ZcashExtractedNoteCommitment") -> "ZcashAnchor":

        return _UniffiConverterTypeZcashAnchor.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardmerklepath_root,self._pointer,
        _UniffiConverterTypeZcashExtractedNoteCommitment.lower(cmx))
        )






class _UniffiConverterTypeZcashOrchardMerklePath:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardMerklePath):
            raise TypeError("Expected ZcashOrchardMerklePath instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardMerklePath._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardNote:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnote, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, recipient: "ZcashOrchardAddress",value: "ZcashOrchardNoteValue",rho: "ZcashOrchardNullifier",rseed: "ZcashOrchardRandomSeed"):




        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnote_from_parts,
        _UniffiConverterTypeZcashOrchardAddress.lower(recipient),
        _UniffiConverterTypeZcashOrchardNoteValue.lower(value),
        _UniffiConverterTypeZcashOrchardNullifier.lower(rho),
        _UniffiConverterTypeZcashOrchardRandomSeed.lower(rseed))
        return cls._make_instance_(pointer)



    def commitment(self, ) -> "ZcashOrchardNoteCommitment":
        return _UniffiConverterTypeZcashOrchardNoteCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_commitment,self._pointer,)
        )






    def recipient(self, ) -> "ZcashOrchardAddress":
        return _UniffiConverterTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_recipient,self._pointer,)
        )






    def value(self, ) -> "ZcashOrchardNoteValue":
        return _UniffiConverterTypeZcashOrchardNoteValue.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnote_value,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardNote:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardNote):
            raise TypeError("Expected ZcashOrchardNote instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardNote._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardNoteCommitment:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotecommitment, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_extracted_note_commitment(self, ) -> "ZcashExtractedNoteCommitment":
        return _UniffiConverterTypeZcashExtractedNoteCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotecommitment_to_extracted_note_commitment,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardNoteCommitment:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardNoteCommitment):
            raise TypeError("Expected ZcashOrchardNoteCommitment instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardNoteCommitment._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardNoteValue:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnotevalue, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_raw(cls, value: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnotevalue_from_raw,
        _UniffiConverterUInt64.lower(value))
        return cls._make_instance_(pointer)



    def value(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnotevalue_value,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardNoteValue:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardNoteValue):
            raise TypeError("Expected ZcashOrchardNoteValue instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardNoteValue._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardNullifier:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardnullifier, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardnullifier_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardnullifier_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardNullifier:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardNullifier):
            raise TypeError("Expected ZcashOrchardNullifier instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardNullifier._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardOutgoingViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardoutgoingviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardoutgoingviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardoutgoingviewingkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardOutgoingViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardOutgoingViewingKey):
            raise TypeError("Expected ZcashOrchardOutgoingViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardOutgoingViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardRandomSeed:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardrandomseed, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]",rho: "ZcashOrchardNullifier"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardrandomseed_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data),
        _UniffiConverterTypeZcashOrchardNullifier.lower(rho))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardrandomseed_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardRandomSeed:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardRandomSeed):
            raise TypeError("Expected ZcashOrchardRandomSeed instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardRandomSeed._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardSpendingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardspendingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def from_zip32_seed(cls, seed: "typing.List[int]",coin_type: "int",account: "int"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardspendingkey_from_zip32_seed,
        _UniffiConverterSequenceUInt8.lower(seed),
        _UniffiConverterUInt32.lower(coin_type),
        _UniffiConverterUInt32.lower(account))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_bytes,self._pointer,)
        )






    def to_fvk(self, ) -> "ZcashOrchardFullViewingKey":
        return _UniffiConverterTypeZcashOrchardFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardspendingkey_to_fvk,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardSpendingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardSpendingKey):
            raise TypeError("Expected ZcashOrchardSpendingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardSpendingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardTransactionBuilder:
    _pointer: ctypes.c_void_p
    def __init__(self, parameters: "ZcashConsensusParameters",target_height: "ZcashBlockHeight",expiry_height: "ZcashBlockHeight",anchor: "ZcashAnchor",flags: "ZcashOrchardFlags"):





        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashorchardtransactionbuilder_new,
        _UniffiConverterTypeZcashConsensusParameters.lower(parameters),
        _UniffiConverterTypeZcashBlockHeight.lower(target_height),
        _UniffiConverterTypeZcashBlockHeight.lower(expiry_height),
        _UniffiConverterTypeZcashAnchor.lower(anchor),
        _UniffiConverterTypeZcashOrchardFlags.lower(flags))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardtransactionbuilder, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_recipient(self, ovk: "typing.Optional[ZcashOrchardOutgoingViewingKey]",recipient: "ZcashOrchardAddress",value: "ZcashOrchardNoteValue",memo: "typing.Optional[typing.List[int]]"):




        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_recipient,self._pointer,
        _UniffiConverterOptionalTypeZcashOrchardOutgoingViewingKey.lower(ovk),
        _UniffiConverterTypeZcashOrchardAddress.lower(recipient),
        _UniffiConverterTypeZcashOrchardNoteValue.lower(value),
        _UniffiConverterOptionalSequenceUInt8.lower(memo))







    def add_spend(self, fvk: "ZcashOrchardFullViewingKey",note: "ZcashOrchardNote",merkle_path: "ZcashOrchardMerklePath"):



        _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_add_spend,self._pointer,
        _UniffiConverterTypeZcashOrchardFullViewingKey.lower(fvk),
        _UniffiConverterTypeZcashOrchardNote.lower(note),
        _UniffiConverterTypeZcashOrchardMerklePath.lower(merkle_path))







    def build(self, keys: "typing.List[ZcashOrchardSpendingKey]",sighash: "typing.List[int]") -> "ZcashTransaction":


        return _UniffiConverterTypeZcashTransaction.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardtransactionbuilder_build,self._pointer,
        _UniffiConverterSequenceTypeZcashOrchardSpendingKey.lower(keys),
        _UniffiConverterSequenceUInt8.lower(sighash))
        )






class _UniffiConverterTypeZcashOrchardTransactionBuilder:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardTransactionBuilder):
            raise TypeError("Expected ZcashOrchardTransactionBuilder instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardTransactionBuilder._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOrchardValueCommitment:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashorchardvaluecommitment, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashorchardvaluecommitment_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOrchardValueCommitment:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOrchardValueCommitment):
            raise TypeError("Expected ZcashOrchardValueCommitment instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOrchardValueCommitment._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOutPoint:
    _pointer: ctypes.c_void_p
    def __init__(self, hash: "typing.List[int]",n: "int"):


        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutpoint_new,
        _UniffiConverterSequenceUInt8.lower(hash),
        _UniffiConverterUInt32.lower(n))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutpoint, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashOutPoint:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOutPoint):
            raise TypeError("Expected ZcashOutPoint instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOutPoint._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashOutgoingViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashoutgoingviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, b: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashoutgoingviewingkey_from_bytes,
        _UniffiConverterSequenceUInt8.lower(b))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashoutgoingviewingkey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashOutgoingViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashOutgoingViewingKey):
            raise TypeError("Expected ZcashOutgoingViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashOutgoingViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashPaymentAddress:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashpaymentaddress, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",input: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(input))
        return cls._make_instance_(pointer)


    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashpaymentaddress_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



    def create_note(self, value: "int",rseed: "ZcashRseed") -> "ZcashSaplingNote":


        return _UniffiConverterTypeZcashSaplingNote.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_create_note,self._pointer,
        _UniffiConverterUInt64.lower(value),
        _UniffiConverterTypeZcashRseed.lower(rseed))
        )






    def diversifier(self, ) -> "ZcashDiversifier":
        return _UniffiConverterTypeZcashDiversifier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_diversifier,self._pointer,)
        )






    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def pk_d(self, ) -> "ZcashSaplingDiversifiedTransmissionKey":
        return _UniffiConverterTypeZcashSaplingDiversifiedTransmissionKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_pk_d,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashpaymentaddress_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashPaymentAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashPaymentAddress):
            raise TypeError("Expected ZcashPaymentAddress instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashPaymentAddress._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashProofGenerationKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashproofgenerationkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_viewing_key(self, ) -> "ZcashViewingKey":
        return _UniffiConverterTypeZcashViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashproofgenerationkey_to_viewing_key,self._pointer,)
        )






class _UniffiConverterTypeZcashProofGenerationKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashProofGenerationKey):
            raise TypeError("Expected ZcashProofGenerationKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashProofGenerationKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashProvingKey:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashprovingkey_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashprovingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashProvingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashProvingKey):
            raise TypeError("Expected ZcashProvingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashProvingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashRatio:
    _pointer: ctypes.c_void_p
    def __init__(self, numerator: "int",denominator: "int"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashratio_new,
        _UniffiConverterUInt64.lower(numerator),
        _UniffiConverterUInt64.lower(denominator))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashratio, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def denominator(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_denominator,self._pointer,)
        )






    def numerator(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashratio_numerator,self._pointer,)
        )






class _UniffiConverterTypeZcashRatio:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashRatio):
            raise TypeError("Expected ZcashRatio instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashRatio._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashReceivedNoteId:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivednoteid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashReceivedNoteId:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashReceivedNoteId):
            raise TypeError("Expected ZcashReceivedNoteId instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashReceivedNoteId._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashReceivedSaplingNote:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashreceivedsaplingnote, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def diversifier(self, ) -> "ZcashDiversifier":
        return _UniffiConverterTypeZcashDiversifier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_diversifier,self._pointer,)
        )






    def internal_note_id(self, ) -> "ZcashReceivedNoteId":
        return _UniffiConverterTypeZcashReceivedNoteId.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_internal_note_id,self._pointer,)
        )






    def note_commitment_tree_position(self, ) -> "MerkleTreePosition":
        return _UniffiConverterTypeMerkleTreePosition.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_note_commitment_tree_position,self._pointer,)
        )






    def value(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashreceivedsaplingnote_value,self._pointer,)
        )






class _UniffiConverterTypeZcashReceivedSaplingNote:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashReceivedSaplingNote):
            raise TypeError("Expected ZcashReceivedSaplingNote instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashReceivedSaplingNote._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashRecipientAddress:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashrecipientaddress, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",address: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(address))
        return cls._make_instance_(pointer)


    @classmethod
    def shielded(cls, addr: "ZcashPaymentAddress"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_shielded,
        _UniffiConverterTypeZcashPaymentAddress.lower(addr))
        return cls._make_instance_(pointer)


    @classmethod
    def transparent(cls, addr: "ZcashTransparentAddress"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_transparent,
        _UniffiConverterTypeZcashTransparentAddress.lower(addr))
        return cls._make_instance_(pointer)


    @classmethod
    def unified(cls, addr: "ZcashUnifiedAddress"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashrecipientaddress_unified,
        _UniffiConverterTypeZcashUnifiedAddress.lower(addr))
        return cls._make_instance_(pointer)



    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashrecipientaddress_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






class _UniffiConverterTypeZcashRecipientAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashRecipientAddress):
            raise TypeError("Expected ZcashRecipientAddress instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashRecipientAddress._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingBundle:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingbundle, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def shielded_outputs(self, ) -> "typing.List[ZcashSaplingOutputDescription]":
        return _UniffiConverterSequenceTypeZcashSaplingOutputDescription.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_outputs,self._pointer,)
        )






    def shielded_spends(self, ) -> "typing.List[ZcashSaplingSpendDescription]":
        return _UniffiConverterSequenceTypeZcashSaplingSpendDescription.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_shielded_spends,self._pointer,)
        )






    def value_balance(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingbundle_value_balance,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingBundle:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingBundle):
            raise TypeError("Expected ZcashSaplingBundle instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingBundle._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingDiversifiedTransmissionKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingdiversifiedtransmissionkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashSaplingDiversifiedTransmissionKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingDiversifiedTransmissionKey):
            raise TypeError("Expected ZcashSaplingDiversifiedTransmissionKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingDiversifiedTransmissionKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingExtractedNoteCommitment:
    _pointer: ctypes.c_void_p
    def __init__(self, data: "typing.List[int]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingextractednotecommitment_new,
        _UniffiConverterSequenceUInt8.lower(data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingextractednotecommitment, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingextractednotecommitment_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingExtractedNoteCommitment:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingExtractedNoteCommitment):
            raise TypeError("Expected ZcashSaplingExtractedNoteCommitment instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingExtractedNoteCommitment._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingIvk:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingivk, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_payment_address(self, diversifier: "ZcashDiversifier") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_payment_address,self._pointer,
        _UniffiConverterTypeZcashDiversifier.lower(diversifier))
        )






    def to_repr(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingivk_to_repr,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingIvk:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingIvk):
            raise TypeError("Expected ZcashSaplingIvk instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingIvk._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingMerklePath:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmerklepath, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def auth_path(self, ) -> "typing.List[ZcashAuthPath]":
        return _UniffiConverterSequenceTypeZcashAuthPath.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_auth_path,self._pointer,)
        )






    def position(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmerklepath_position,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingMerklePath:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingMerklePath):
            raise TypeError("Expected ZcashSaplingMerklePath instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingMerklePath._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingMetadata:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingmetadata_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingmetadata, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def output_index(self, n: "int") -> "typing.Optional[int]":

        return _UniffiConverterOptionalUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_output_index,self._pointer,
        _UniffiConverterUInt64.lower(n))
        )






    def spend_index(self, n: "int") -> "typing.Optional[int]":

        return _UniffiConverterOptionalUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingmetadata_spend_index,self._pointer,
        _UniffiConverterUInt64.lower(n))
        )






class _UniffiConverterTypeZcashSaplingMetadata:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingMetadata):
            raise TypeError("Expected ZcashSaplingMetadata instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingMetadata._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingNode:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnode, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_cmu(cls, cmu: "ZcashSaplingExtractedNoteCommitment"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnode_from_cmu,
        _UniffiConverterTypeZcashSaplingExtractedNoteCommitment.lower(cmu))
        return cls._make_instance_(pointer)



class _UniffiConverterTypeZcashSaplingNode:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingNode):
            raise TypeError("Expected ZcashSaplingNode instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingNode._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingNote:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnote, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, recipient: "ZcashPaymentAddress",value: "ZcashSaplingNoteValue",rseed: "ZcashRseed"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnote_from_parts,
        _UniffiConverterTypeZcashPaymentAddress.lower(recipient),
        _UniffiConverterTypeZcashSaplingNoteValue.lower(value),
        _UniffiConverterTypeZcashRseed.lower(rseed))
        return cls._make_instance_(pointer)



    def cmu(self, ) -> "ZcashSaplingExtractedNoteCommitment":
        return _UniffiConverterTypeZcashSaplingExtractedNoteCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_cmu,self._pointer,)
        )






    def value(self, ) -> "ZcashSaplingNoteValue":
        return _UniffiConverterTypeZcashSaplingNoteValue.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnote_value,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingNote:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingNote):
            raise TypeError("Expected ZcashSaplingNote instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingNote._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingNoteValue:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnotevalue, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_raw(cls, data: "int"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsaplingnotevalue_from_raw,
        _UniffiConverterUInt64.lower(data))
        return cls._make_instance_(pointer)



    def inner(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnotevalue_inner,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingNoteValue:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingNoteValue):
            raise TypeError("Expected ZcashSaplingNoteValue instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingNoteValue._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingNullifier:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingnullifier, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingnullifier_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingNullifier:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingNullifier):
            raise TypeError("Expected ZcashSaplingNullifier instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingNullifier._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingOutputDescription:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingoutputdescription, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def cmu(self, ) -> "ZcashSaplingExtractedNoteCommitment":
        return _UniffiConverterTypeZcashSaplingExtractedNoteCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cmu,self._pointer,)
        )






    def cv(self, ) -> "ZcashSaplingValueCommitment":
        return _UniffiConverterTypeZcashSaplingValueCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingoutputdescription_cv,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingOutputDescription:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingOutputDescription):
            raise TypeError("Expected ZcashSaplingOutputDescription instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingOutputDescription._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingPublicKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingpublickey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingpublickey_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingPublicKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingPublicKey):
            raise TypeError("Expected ZcashSaplingPublicKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingPublicKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingSpendDescription:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingspenddescription, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def anchor(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_anchor,self._pointer,)
        )






    def cv(self, ) -> "ZcashSaplingValueCommitment":
        return _UniffiConverterTypeZcashSaplingValueCommitment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_cv,self._pointer,)
        )






    def nullifier(self, ) -> "ZcashSaplingNullifier":
        return _UniffiConverterTypeZcashSaplingNullifier.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_nullifier,self._pointer,)
        )






    def rk(self, ) -> "ZcashSaplingPublicKey":
        return _UniffiConverterTypeZcashSaplingPublicKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingspenddescription_rk,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingSpendDescription:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingSpendDescription):
            raise TypeError("Expected ZcashSaplingSpendDescription instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingSpendDescription._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSaplingValueCommitment:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsaplingvaluecommitment, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsaplingvaluecommitment_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashSaplingValueCommitment:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSaplingValueCommitment):
            raise TypeError("Expected ZcashSaplingValueCommitment instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSaplingValueCommitment._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashScanRange:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscanrange, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, start_block: "ZcashBlockHeight",end_block: "ZcashBlockHeight",priority: "ZcashScanPriority"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscanrange_from_parts,
        _UniffiConverterTypeZcashBlockHeight.lower(start_block),
        _UniffiConverterTypeZcashBlockHeight.lower(end_block),
        _UniffiConverterTypeZcashScanPriority.lower(priority))
        return cls._make_instance_(pointer)



    def block_range(self, ) -> "typing.List[ZcashBlockHeight]":
        return _UniffiConverterSequenceTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_block_range,self._pointer,)
        )






    def is_empty(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_is_empty,self._pointer,)
        )






    def len(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_len,self._pointer,)
        )






    def priority(self, ) -> "ZcashScanPriority":
        return _UniffiConverterTypeZcashScanPriority.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscanrange_priority,self._pointer,)
        )






class _UniffiConverterTypeZcashScanRange:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashScanRange):
            raise TypeError("Expected ZcashScanRange instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashScanRange._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashScannedBlock:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscannedblock, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, metadata: "ZcashBlockMetadata",block_time: "int",transactions: "typing.List[ZcashWalletTx]",sapling_nullifier_map: "typing.List[TripleSaplingNullifierMap]",sapling_commitments: "typing.List[TupleSaplingCommitments]"):





        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscannedblock_from_parts,
        _UniffiConverterTypeZcashBlockMetadata.lower(metadata),
        _UniffiConverterUInt32.lower(block_time),
        _UniffiConverterSequenceTypeZcashWalletTx.lower(transactions),
        _UniffiConverterSequenceTypeTripleSaplingNullifierMap.lower(sapling_nullifier_map),
        _UniffiConverterSequenceTypeTupleSaplingCommitments.lower(sapling_commitments))
        return cls._make_instance_(pointer)



    def block_hash(self, ) -> "ZcashBlockHash":
        return _UniffiConverterTypeZcashBlockHash.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_hash,self._pointer,)
        )






    def block_time(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_block_time,self._pointer,)
        )






    def height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_height,self._pointer,)
        )






    def metadata(self, ) -> "ZcashBlockMetadata":
        return _UniffiConverterTypeZcashBlockMetadata.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_metadata,self._pointer,)
        )






    def sapling_commitments(self, ) -> "typing.List[TupleSaplingCommitments]":
        return _UniffiConverterSequenceTypeTupleSaplingCommitments.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_commitments,self._pointer,)
        )






    def sapling_nullifier_map(self, ) -> "typing.List[TripleSaplingNullifierMap]":
        return _UniffiConverterSequenceTypeTripleSaplingNullifierMap.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_sapling_nullifier_map,self._pointer,)
        )






    def transactions(self, ) -> "typing.List[ZcashWalletTx]":
        return _UniffiConverterSequenceTypeZcashWalletTx.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscannedblock_transactions,self._pointer,)
        )






class _UniffiConverterTypeZcashScannedBlock:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashScannedBlock):
            raise TypeError("Expected ZcashScannedBlock instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashScannedBlock._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashScript:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashscript, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashscript_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashscript_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashScript:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashScript):
            raise TypeError("Expected ZcashScript instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashScript._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashSentTransactionOutput:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashsenttransactionoutput, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, output_index: "int",recipient: "ZcashRecipient",value: "ZcashAmount",memo: "typing.Optional[ZcashMemoBytes]",sapling_change_to: "typing.Optional[TupleAccountIdAndSaplingNote]"):





        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashsenttransactionoutput_from_parts,
        _UniffiConverterUInt32.lower(output_index),
        _UniffiConverterTypeZcashRecipient.lower(recipient),
        _UniffiConverterTypeZcashAmount.lower(value),
        _UniffiConverterOptionalTypeZcashMemoBytes.lower(memo),
        _UniffiConverterOptionalTypeTupleAccountIdAndSaplingNote.lower(sapling_change_to))
        return cls._make_instance_(pointer)



    def memo(self, ) -> "typing.Optional[ZcashMemoBytes]":
        return _UniffiConverterOptionalTypeZcashMemoBytes.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_memo,self._pointer,)
        )






    def output_index(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_output_index,self._pointer,)
        )






    def recipient(self, ) -> "ZcashRecipient":
        return _UniffiConverterTypeZcashRecipient.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_recipient,self._pointer,)
        )






    def sapling_change_to(self, ) -> "typing.Optional[TupleAccountIdAndSaplingNote]":
        return _UniffiConverterOptionalTypeTupleAccountIdAndSaplingNote.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_sapling_change_to,self._pointer,)
        )






    def value(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashsenttransactionoutput_value,self._pointer,)
        )






class _UniffiConverterTypeZcashSentTransactionOutput:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashSentTransactionOutput):
            raise TypeError("Expected ZcashSentTransactionOutput instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashSentTransactionOutput._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTestFixedGreedyInputSelector:
    _pointer: ctypes.c_void_p
    def __init__(self, change_strategy: "ZcashFixedSingleOutputChangeStrategy",dust_output_policy: "ZcashDustOutputPolicy"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestfixedgreedyinputselector_new,
        _UniffiConverterTypeZcashFixedSingleOutputChangeStrategy.lower(change_strategy),
        _UniffiConverterTypeZcashDustOutputPolicy.lower(dust_output_policy))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestfixedgreedyinputselector, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashTestFixedGreedyInputSelector:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTestFixedGreedyInputSelector):
            raise TypeError("Expected ZcashTestFixedGreedyInputSelector instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTestFixedGreedyInputSelector._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTestZip317GreedyInputSelector:
    _pointer: ctypes.c_void_p
    def __init__(self, change_strategy: "ZcashZip317SingleOutputChangeStrategy",dust_output_policy: "ZcashDustOutputPolicy"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtestzip317greedyinputselector_new,
        _UniffiConverterTypeZcashZip317SingleOutputChangeStrategy.lower(change_strategy),
        _UniffiConverterTypeZcashDustOutputPolicy.lower(dust_output_policy))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtestzip317greedyinputselector, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashTestZip317GreedyInputSelector:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTestZip317GreedyInputSelector):
            raise TypeError("Expected ZcashTestZip317GreedyInputSelector instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTestZip317GreedyInputSelector._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTransaction:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransaction, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]",consensus_branch_id: "ZcashBranchId"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransaction_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data),
        _UniffiConverterTypeZcashBranchId.lower(consensus_branch_id))
        return cls._make_instance_(pointer)



    def consensus_branch_id(self, ) -> "ZcashBranchId":
        return _UniffiConverterTypeZcashBranchId.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_consensus_branch_id,self._pointer,)
        )






    def expiry_height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_expiry_height,self._pointer,)
        )






    def lock_time(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_lock_time,self._pointer,)
        )






    def orchard_bundle(self, ) -> "typing.Optional[ZcashOrchardBundle]":
        return _UniffiConverterOptionalTypeZcashOrchardBundle.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_orchard_bundle,self._pointer,)
        )






    def sapling_bundle(self, ) -> "typing.Optional[ZcashSaplingBundle]":
        return _UniffiConverterOptionalTypeZcashSaplingBundle.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_sapling_bundle,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_to_bytes,self._pointer,)
        )






    def transparent_bundle(self, ) -> "typing.Optional[ZcashTransparentBundle]":
        return _UniffiConverterOptionalTypeZcashTransparentBundle.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_transparent_bundle,self._pointer,)
        )






    def txid(self, ) -> "ZcashTxId":
        return _UniffiConverterTypeZcashTxId.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_txid,self._pointer,)
        )






    def version(self, ) -> "ZcashTxVersion":
        return _UniffiConverterTypeZcashTxVersion.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransaction_version,self._pointer,)
        )






class _UniffiConverterTypeZcashTransaction:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTransaction):
            raise TypeError("Expected ZcashTransaction instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTransaction._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTransactionBuilder:
    _pointer: ctypes.c_void_p
    def __init__(self, parameters: "ZcashConsensusParameters",block_height: "ZcashBlockHeight"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionbuilder_new,
        _UniffiConverterTypeZcashConsensusParameters.lower(parameters),
        _UniffiConverterTypeZcashBlockHeight.lower(block_height))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionbuilder, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_sapling_output(self, ovk: "typing.Optional[ZcashOutgoingViewingKey]",to: "ZcashPaymentAddress",value: "ZcashAmount",memo: "ZcashMemoBytes"):




        _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_output,self._pointer,
        _UniffiConverterOptionalTypeZcashOutgoingViewingKey.lower(ovk),
        _UniffiConverterTypeZcashPaymentAddress.lower(to),
        _UniffiConverterTypeZcashAmount.lower(value),
        _UniffiConverterTypeZcashMemoBytes.lower(memo))







    def add_sapling_spend(self, extsk: "ZcashExtendedSpendingKey",diversifier: "ZcashDiversifier",note: "ZcashSaplingNote",merkle_path: "ZcashSaplingMerklePath"):




        _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_sapling_spend,self._pointer,
        _UniffiConverterTypeZcashExtendedSpendingKey.lower(extsk),
        _UniffiConverterTypeZcashDiversifier.lower(diversifier),
        _UniffiConverterTypeZcashSaplingNote.lower(note),
        _UniffiConverterTypeZcashSaplingMerklePath.lower(merkle_path))







    def add_transparent_input(self, sk: "SecpSecretKey",utxo: "ZcashOutPoint",coin: "ZcashTxOut"):



        _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_input,self._pointer,
        _UniffiConverterTypeSecpSecretKey.lower(sk),
        _UniffiConverterTypeZcashOutPoint.lower(utxo),
        _UniffiConverterTypeZcashTxOut.lower(coin))







    def add_transparent_output(self, to: "ZcashTransparentAddress",value: "ZcashAmount"):


        _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_add_transparent_output,self._pointer,
        _UniffiConverterTypeZcashTransparentAddress.lower(to),
        _UniffiConverterTypeZcashAmount.lower(value))







    def build(self, prover: "ZcashLocalTxProver",fee_rule: "ZcashFeeRules") -> "ZcashTransactionAndSaplingMetadata":


        return _UniffiConverterTypeZcashTransactionAndSaplingMetadata.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionbuilder_build,self._pointer,
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashFeeRules.lower(fee_rule))
        )






class _UniffiConverterTypeZcashTransactionBuilder:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTransactionBuilder):
            raise TypeError("Expected ZcashTransactionBuilder instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTransactionBuilder._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTransactionRequest:
    _pointer: ctypes.c_void_p
    def __init__(self, payments: "typing.List[ZcashPayment]"):

        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashZip321Error,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_new,
        _UniffiConverterSequenceTypeZcashPayment.lower(payments))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransactionrequest, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def empty(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_empty,)
        return cls._make_instance_(pointer)


    @classmethod
    def from_uri(cls, params: "ZcashConsensusParameters",uri: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashZip321Error,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransactionrequest_from_uri,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(uri))
        return cls._make_instance_(pointer)



    def payments(self, ) -> "typing.List[ZcashPayment]":
        return _UniffiConverterSequenceTypeZcashPayment.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_payments,self._pointer,)
        )






    def to_uri(self, params: "ZcashConsensusParameters") -> "typing.Optional[str]":

        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransactionrequest_to_uri,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






class _UniffiConverterTypeZcashTransactionRequest:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTransactionRequest):
            raise TypeError("Expected ZcashTransactionRequest instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTransactionRequest._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTransparentAddress:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentaddress, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",input: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(input))
        return cls._make_instance_(pointer)


    @classmethod
    def from_public_key(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_public_key,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def from_script(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtransparentaddress_from_script,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def is_public_key(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_public_key,self._pointer,)
        )






    def is_script(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_is_script,self._pointer,)
        )






    def script(self, ) -> "ZcashScript":
        return _UniffiConverterTypeZcashScript.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_script,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentaddress_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashTransparentAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTransparentAddress):
            raise TypeError("Expected ZcashTransparentAddress instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTransparentAddress._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTransparentBundle:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtransparentbundle, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def is_coinbase(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_is_coinbase,self._pointer,)
        )






    def vin(self, ) -> "typing.List[ZcashTxIn]":
        return _UniffiConverterSequenceTypeZcashTxIn.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vin,self._pointer,)
        )






    def vout(self, ) -> "typing.List[ZcashTxOut]":
        return _UniffiConverterSequenceTypeZcashTxOut.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtransparentbundle_vout,self._pointer,)
        )






class _UniffiConverterTypeZcashTransparentBundle:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTransparentBundle):
            raise TypeError("Expected ZcashTransparentBundle instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTransparentBundle._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTreeState:
    _pointer: ctypes.c_void_p
    def __init__(self, network: "str",height: "int",hash: "str",time: "int",sapling_tree: "str",orchard_tree: "str"):






        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_new,
        _UniffiConverterString.lower(network),
        _UniffiConverterUInt64.lower(height),
        _UniffiConverterString.lower(hash),
        _UniffiConverterUInt32.lower(time),
        _UniffiConverterString.lower(sapling_tree),
        _UniffiConverterString.lower(orchard_tree))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtreestate, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, bytes: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtreestate_from_bytes,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)



class _UniffiConverterTypeZcashTreeState:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTreeState):
            raise TypeError("Expected ZcashTreeState instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTreeState._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTxId:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxid_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_bytes,self._pointer,)
        )






    def to_hex_string(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxid_to_hex_string,self._pointer,)
        )






class _UniffiConverterTypeZcashTxId:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTxId):
            raise TypeError("Expected ZcashTxId instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTxId._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTxIn:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxin, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxin_to_bytes,self._pointer,)
        )






class _UniffiConverterTypeZcashTxIn:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTxIn):
            raise TypeError("Expected ZcashTxIn instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTxIn._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTxOut:
    _pointer: ctypes.c_void_p
    def __init__(self, value: "ZcashAmount",script_pubkey: "ZcashScript"):


        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxout_new,
        _UniffiConverterTypeZcashAmount.lower(value),
        _UniffiConverterTypeZcashScript.lower(script_pubkey))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxout, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def recipient_address(self, ) -> "typing.Optional[ZcashTransparentAddress]":
        return _UniffiConverterOptionalTypeZcashTransparentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_recipient_address,self._pointer,)
        )






    def script_pubkey(self, ) -> "ZcashScript":
        return _UniffiConverterTypeZcashScript.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_script_pubkey,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_to_bytes,self._pointer,)
        )






    def value(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxout_value,self._pointer,)
        )






class _UniffiConverterTypeZcashTxOut:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTxOut):
            raise TypeError("Expected ZcashTxOut instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTxOut._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashTxVersion:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashtxversion, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, data: "typing.List[int]"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_from_bytes,
        _UniffiConverterSequenceUInt8.lower(data))
        return cls._make_instance_(pointer)


    @classmethod
    def suggested_for_branch(cls, consensus_branch_id: "ZcashBranchId"):

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashtxversion_suggested_for_branch,
        _UniffiConverterTypeZcashBranchId.lower(consensus_branch_id))
        return cls._make_instance_(pointer)



    def has_orchard(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_orchard,self._pointer,)
        )






    def has_overwinter(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_overwinter,self._pointer,)
        )






    def has_sapling(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sapling,self._pointer,)
        )






    def has_sprout(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_has_sprout,self._pointer,)
        )






    def header(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_header,self._pointer,)
        )






    def selection(self, ) -> "ZcashTxVersionSelection":
        return _UniffiConverterTypeZcashTxVersionSelection.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_selection,self._pointer,)
        )






    def to_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_to_bytes,self._pointer,)
        )






    def version_group_id(self, ) -> "int":
        return _UniffiConverterUInt32.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashtxversion_version_group_id,self._pointer,)
        )






class _UniffiConverterTypeZcashTxVersion:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashTxVersion):
            raise TypeError("Expected ZcashTxVersion instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashTxVersion._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashUnifiedAddress:
    _pointer: ctypes.c_void_p
    def __init__(self, orchard: "typing.Optional[ZcashOrchardAddress]",sapling: "typing.Optional[ZcashPaymentAddress]",transparent: "typing.Optional[ZcashTransparentAddress]"):



        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_new,
        _UniffiConverterOptionalTypeZcashOrchardAddress.lower(orchard),
        _UniffiConverterOptionalTypeZcashPaymentAddress.lower(sapling),
        _UniffiConverterOptionalTypeZcashTransparentAddress.lower(transparent))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedaddress, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",address: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedaddress_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(address))
        return cls._make_instance_(pointer)



    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def orchard(self, ) -> "typing.Optional[ZcashOrchardAddress]":
        return _UniffiConverterOptionalTypeZcashOrchardAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_orchard,self._pointer,)
        )






    def sapling(self, ) -> "typing.Optional[ZcashPaymentAddress]":
        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_sapling,self._pointer,)
        )






    def transparent(self, ) -> "typing.Optional[ZcashTransparentAddress]":
        return _UniffiConverterOptionalTypeZcashTransparentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedaddress_transparent,self._pointer,)
        )






class _UniffiConverterTypeZcashUnifiedAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashUnifiedAddress):
            raise TypeError("Expected ZcashUnifiedAddress instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashUnifiedAddress._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashUnifiedFullViewingKey:
    _pointer: ctypes.c_void_p
    def __init__(self, transparent: "typing.Optional[ZcashAccountPubKey]",sapling: "typing.Optional[ZcashDiversifiableFullViewingKey]",orchard: "typing.Optional[ZcashOrchardFullViewingKey]"):



        self._pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_new,
        _UniffiConverterOptionalTypeZcashAccountPubKey.lower(transparent),
        _UniffiConverterOptionalTypeZcashDiversifiableFullViewingKey.lower(sapling),
        _UniffiConverterOptionalTypeZcashOrchardFullViewingKey.lower(orchard))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedfullviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, params: "ZcashConsensusParameters",encoded: "str"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedfullviewingkey_decode,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(encoded))
        return cls._make_instance_(pointer)



    def address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashUnifiedAddress]":

        return _UniffiConverterOptionalTypeZcashUnifiedAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def default_address(self, ) -> "ZcashUnifiedAddressAndDiversifierIndex":
        return _UniffiConverterTypeZcashUnifiedAddressAndDiversifierIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_default_address,self._pointer,)
        )






    def encode(self, params: "ZcashConsensusParameters") -> "str":

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_encode,self._pointer,
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        )






    def find_address(self, j: "ZcashDiversifierIndex") -> "typing.Optional[ZcashUnifiedAddressAndDiversifierIndex]":

        return _UniffiConverterOptionalTypeZcashUnifiedAddressAndDiversifierIndex.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_find_address,self._pointer,
        _UniffiConverterTypeZcashDiversifierIndex.lower(j))
        )






    def orchard(self, ) -> "typing.Optional[ZcashOrchardFullViewingKey]":
        return _UniffiConverterOptionalTypeZcashOrchardFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_orchard,self._pointer,)
        )






    def sapling(self, ) -> "typing.Optional[ZcashDiversifiableFullViewingKey]":
        return _UniffiConverterOptionalTypeZcashDiversifiableFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_sapling,self._pointer,)
        )






    def transparent(self, ) -> "typing.Optional[ZcashAccountPubKey]":
        return _UniffiConverterOptionalTypeZcashAccountPubKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedfullviewingkey_transparent,self._pointer,)
        )






class _UniffiConverterTypeZcashUnifiedFullViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashUnifiedFullViewingKey):
            raise TypeError("Expected ZcashUnifiedFullViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashUnifiedFullViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashUnifiedSpendingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashunifiedspendingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, era: "ZcashKeysEra",encoded: "typing.List[int]"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_bytes,
        _UniffiConverterTypeZcashKeysEra.lower(era),
        _UniffiConverterSequenceUInt8.lower(encoded))
        return cls._make_instance_(pointer)


    @classmethod
    def from_seed(cls, params: "ZcashConsensusParameters",seed: "typing.List[int]",account_id: "ZcashAccountId"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashunifiedspendingkey_from_seed,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterSequenceUInt8.lower(seed),
        _UniffiConverterTypeZcashAccountId.lower(account_id))
        return cls._make_instance_(pointer)



    def orchard(self, ) -> "ZcashOrchardSpendingKey":
        return _UniffiConverterTypeZcashOrchardSpendingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_orchard,self._pointer,)
        )






    def sapling(self, ) -> "ZcashExtendedSpendingKey":
        return _UniffiConverterTypeZcashExtendedSpendingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_sapling,self._pointer,)
        )






    def to_bytes(self, era: "ZcashKeysEra") -> "typing.List[int]":

        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_bytes,self._pointer,
        _UniffiConverterTypeZcashKeysEra.lower(era))
        )






    def to_unified_full_viewing_key(self, ) -> "ZcashUnifiedFullViewingKey":
        return _UniffiConverterTypeZcashUnifiedFullViewingKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_to_unified_full_viewing_key,self._pointer,)
        )






    def transparent(self, ) -> "ZcashAccountPrivKey":
        return _UniffiConverterTypeZcashAccountPrivKey.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashunifiedspendingkey_transparent,self._pointer,)
        )






class _UniffiConverterTypeZcashUnifiedSpendingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashUnifiedSpendingKey):
            raise TypeError("Expected ZcashUnifiedSpendingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashUnifiedSpendingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashVerifyingKey:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashverifyingkey_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashverifyingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashVerifyingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashVerifyingKey):
            raise TypeError("Expected ZcashVerifyingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashVerifyingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashViewingKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashviewingkey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def ivk(self, ) -> "ZcashSaplingIvk":
        return _UniffiConverterTypeZcashSaplingIvk.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_ivk,self._pointer,)
        )






    def to_payment_address(self, diversifier: "ZcashDiversifier") -> "typing.Optional[ZcashPaymentAddress]":

        return _UniffiConverterOptionalTypeZcashPaymentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashviewingkey_to_payment_address,self._pointer,
        _UniffiConverterTypeZcashDiversifier.lower(diversifier))
        )






class _UniffiConverterTypeZcashViewingKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashViewingKey):
            raise TypeError("Expected ZcashViewingKey instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashViewingKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletDb:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletdb, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def for_path(cls, path: "str",params: "ZcashConsensusParameters"):


        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletdb_for_path,
        _UniffiConverterString.lower(path),
        _UniffiConverterTypeZcashConsensusParameters.lower(params))
        return cls._make_instance_(pointer)



    def block_fully_scanned(self, ) -> "typing.Optional[ZcashBlockMetadata]":
        return _UniffiConverterOptionalTypeZcashBlockMetadata.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_fully_scanned,self._pointer,)
        )






    def block_max_scanned(self, ) -> "typing.Optional[ZcashBlockMetadata]":
        return _UniffiConverterOptionalTypeZcashBlockMetadata.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_max_scanned,self._pointer,)
        )






    def block_metadata(self, height: "ZcashBlockHeight") -> "typing.Optional[ZcashBlockMetadata]":

        return _UniffiConverterOptionalTypeZcashBlockMetadata.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_block_metadata,self._pointer,
        _UniffiConverterTypeZcashBlockHeight.lower(height))
        )






    def chain_height(self, ) -> "typing.Optional[ZcashBlockHeight]":
        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_chain_height,self._pointer,)
        )






    def create_account(self, seed: "typing.List[int]",birthday: "ZcashAccountBirthday") -> "TupleAccountIdAndUnifiedSpendingKey":


        return _UniffiConverterTypeTupleAccountIdAndUnifiedSpendingKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_create_account,self._pointer,
        _UniffiConverterSequenceUInt8.lower(seed),
        _UniffiConverterTypeZcashAccountBirthday.lower(birthday))
        )






    def get_account_birthday(self, account: "ZcashAccountId") -> "ZcashBlockHeight":

        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_birthday,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account))
        )






    def get_account_for_ufvk(self, zufvk: "ZcashUnifiedFullViewingKey") -> "typing.Optional[ZcashAccountId]":

        return _UniffiConverterOptionalTypeZcashAccountId.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_account_for_ufvk,self._pointer,
        _UniffiConverterTypeZcashUnifiedFullViewingKey.lower(zufvk))
        )






    def get_block_hash(self, height: "ZcashBlockHeight") -> "typing.Optional[ZcashBlockHash]":

        return _UniffiConverterOptionalTypeZcashBlockHash.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_block_hash,self._pointer,
        _UniffiConverterTypeZcashBlockHeight.lower(height))
        )






    def get_current_address(self, aid: "ZcashAccountId") -> "typing.Optional[ZcashUnifiedAddress]":

        return _UniffiConverterOptionalTypeZcashUnifiedAddress.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_current_address,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(aid))
        )






    def get_max_height_hash(self, ) -> "typing.Optional[TupleBlockHeightAndHash]":
        return _UniffiConverterOptionalTypeTupleBlockHeightAndHash.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_max_height_hash,self._pointer,)
        )






    def get_memo(self, id_note: "ZcashNoteId") -> "ZcashMemo":

        return _UniffiConverterTypeZcashMemo.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_memo,self._pointer,
        _UniffiConverterTypeZcashNoteId.lower(id_note))
        )






    def get_min_unspent_height(self, ) -> "typing.Optional[ZcashBlockHeight]":
        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_min_unspent_height,self._pointer,)
        )






    def get_next_available_address(self, account: "ZcashAccountId") -> "typing.Optional[ZcashUnifiedAddress]":

        return _UniffiConverterOptionalTypeZcashUnifiedAddress.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_next_available_address,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account))
        )






    def get_sapling_nullifiers(self, query: "ZcashNullifierQuery") -> "typing.List[TupleAccountIdAndSaplingNullifier]":

        return _UniffiConverterSequenceTypeTupleAccountIdAndSaplingNullifier.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_sapling_nullifiers,self._pointer,
        _UniffiConverterTypeZcashNullifierQuery.lower(query))
        )






    def get_spendable_sapling_notes(self, account: "ZcashAccountId",anchor_height: "ZcashBlockHeight",exclude: "typing.List[ZcashReceivedNoteId]") -> "typing.List[ZcashReceivedSaplingNote]":



        return _UniffiConverterSequenceTypeZcashReceivedSaplingNote.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_spendable_sapling_notes,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account),
        _UniffiConverterTypeZcashBlockHeight.lower(anchor_height),
        _UniffiConverterSequenceTypeZcashReceivedNoteId.lower(exclude))
        )






    def get_target_and_anchor_heights(self, min_confirmations: "int") -> "typing.Optional[TupleTargetAndAnchorHeight]":

        return _UniffiConverterOptionalTypeTupleTargetAndAnchorHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_target_and_anchor_heights,self._pointer,
        _UniffiConverterUInt32.lower(min_confirmations))
        )






    def get_transaction(self, txid: "ZcashTxId") -> "ZcashTransaction":

        return _UniffiConverterTypeZcashTransaction.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transaction,self._pointer,
        _UniffiConverterTypeZcashTxId.lower(txid))
        )






    def get_transparent_balances(self, account: "ZcashAccountId",max_height: "ZcashBlockHeight") -> "dict":


        return _UniffiConverterMapStringTypeZcashAmount.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_balances,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account),
        _UniffiConverterTypeZcashBlockHeight.lower(max_height))
        )






    def get_transparent_receivers(self, aid: "ZcashAccountId") -> "dict":

        return _UniffiConverterMapStringTypeZcashAddressMetadata.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_transparent_receivers,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(aid))
        )






    def get_tx_height(self, txid: "ZcashTxId") -> "typing.Optional[ZcashBlockHeight]":

        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_tx_height,self._pointer,
        _UniffiConverterTypeZcashTxId.lower(txid))
        )






    def get_unified_full_viewing_keys(self, ) -> "dict":
        return _UniffiConverterMapTypeZcashAccountIdTypeZcashUnifiedFullViewingKey.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unified_full_viewing_keys,self._pointer,)
        )






    def get_unspent_transparent_outputs(self, zta: "ZcashTransparentAddress",zbh: "ZcashBlockHeight",zop: "typing.List[ZcashOutPoint]") -> "typing.List[ZcashWalletTransparentOutput]":



        return _UniffiConverterSequenceTypeZcashWalletTransparentOutput.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_unspent_transparent_outputs,self._pointer,
        _UniffiConverterTypeZcashTransparentAddress.lower(zta),
        _UniffiConverterTypeZcashBlockHeight.lower(zbh),
        _UniffiConverterSequenceTypeZcashOutPoint.lower(zop))
        )






    def get_wallet_birthday(self, ) -> "typing.Optional[ZcashBlockHeight]":
        return _UniffiConverterOptionalTypeZcashBlockHeight.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_birthday,self._pointer,)
        )






    def get_wallet_summary(self, min_confirmations: "int") -> "typing.Optional[ZcashWalletSummary]":

        return _UniffiConverterOptionalTypeZcashWalletSummary.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_get_wallet_summary,self._pointer,
        _UniffiConverterUInt32.lower(min_confirmations))
        )






    def initialize(self, seed: "typing.List[int]"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_initialize,self._pointer,
        _UniffiConverterSequenceUInt8.lower(seed))







    def is_valid_account_extfvk(self, account: "ZcashAccountId",extfvk: "ZcashExtendedFullViewingKey") -> "bool":


        return _UniffiConverterBool.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_is_valid_account_extfvk,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account),
        _UniffiConverterTypeZcashExtendedFullViewingKey.lower(extfvk))
        )






    def put_blocks(self, blocks: "typing.List[ZcashScannedBlock]"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_blocks,self._pointer,
        _UniffiConverterSequenceTypeZcashScannedBlock.lower(blocks))







    def put_received_transparent_utxo(self, output: "ZcashWalletTransparentOutput") -> "int":

        return _UniffiConverterInt64.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_received_transparent_utxo,self._pointer,
        _UniffiConverterTypeZcashWalletTransparentOutput.lower(output))
        )






    def put_sapling_subtree_roots(self, start_index: "int",roots: "typing.List[ZcashCommitmentTreeRoot]"):


        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_put_sapling_subtree_roots,self._pointer,
        _UniffiConverterUInt64.lower(start_index),
        _UniffiConverterSequenceTypeZcashCommitmentTreeRoot.lower(roots))







    def select_spendable_sapling_notes(self, account: "ZcashAccountId",target_value: "ZcashAmount",anchor_height: "ZcashBlockHeight",exclude: "typing.List[ZcashReceivedNoteId]") -> "typing.List[ZcashReceivedSaplingNote]":




        return _UniffiConverterSequenceTypeZcashReceivedSaplingNote.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_select_spendable_sapling_notes,self._pointer,
        _UniffiConverterTypeZcashAccountId.lower(account),
        _UniffiConverterTypeZcashAmount.lower(target_value),
        _UniffiConverterTypeZcashBlockHeight.lower(anchor_height),
        _UniffiConverterSequenceTypeZcashReceivedNoteId.lower(exclude))
        )






    def store_decrypted_tx(self, d_tx: "ZcashDecryptedTransaction"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_decrypted_tx,self._pointer,
        _UniffiConverterTypeZcashDecryptedTransaction.lower(d_tx))







    def store_sent_tx(self, sent_tx: "ZcashSentTransaction"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_store_sent_tx,self._pointer,
        _UniffiConverterTypeZcashSentTransaction.lower(sent_tx))







    def suggest_scan_ranges(self, ) -> "typing.List[ZcashScanRange]":
        return _UniffiConverterSequenceTypeZcashScanRange.lift(
            _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_suggest_scan_ranges,self._pointer,)
        )






    def truncate_to_height(self, block_height: "int"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_truncate_to_height,self._pointer,
        _UniffiConverterUInt32.lower(block_height))







    def update_chain_tip(self, tip_height: "int"):

        _rust_call_with_error(
    _UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletdb_update_chain_tip,self._pointer,
        _UniffiConverterUInt32.lower(tip_height))







class _UniffiConverterTypeZcashWalletDb:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletDb):
            raise TypeError("Expected ZcashWalletDb instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletDb._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletSaplingOutput:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingoutput, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashWalletSaplingOutput:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletSaplingOutput):
            raise TypeError("Expected ZcashWalletSaplingOutput instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletSaplingOutput._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletSaplingSpend:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsaplingspend, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashWalletSaplingSpend:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletSaplingSpend):
            raise TypeError("Expected ZcashWalletSaplingSpend instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletSaplingSpend._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletSummary:
    _pointer: ctypes.c_void_p
    def __init__(self, account_balances: "dict",chain_tip_height: "ZcashBlockHeight",fully_scanned_height: "ZcashBlockHeight",scan_progress: "typing.Optional[ZcashRatio]"):




        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwalletsummary_new,
        _UniffiConverterMapStringTypeZcashAccountBalance.lower(account_balances),
        _UniffiConverterTypeZcashBlockHeight.lower(chain_tip_height),
        _UniffiConverterTypeZcashBlockHeight.lower(fully_scanned_height),
        _UniffiConverterOptionalTypeZcashRatio.lower(scan_progress))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwalletsummary, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def account_balances(self, ) -> "dict":
        return _UniffiConverterMapStringTypeZcashAccountBalance.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_account_balances,self._pointer,)
        )






    def chain_tip_height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_chain_tip_height,self._pointer,)
        )






    def fully_scanned_height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_fully_scanned_height,self._pointer,)
        )






    def is_synced(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_is_synced,self._pointer,)
        )






    def scan_progress(self, ) -> "typing.Optional[ZcashRatio]":
        return _UniffiConverterOptionalTypeZcashRatio.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwalletsummary_scan_progress,self._pointer,)
        )






class _UniffiConverterTypeZcashWalletSummary:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletSummary):
            raise TypeError("Expected ZcashWalletSummary instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletSummary._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletTransparentOutput:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettransparentoutput, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_parts(cls, outpoint: "ZcashOutPoint",txout: "ZcashTxOut",height: "ZcashBlockHeight"):



        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettransparentoutput_from_parts,
        _UniffiConverterTypeZcashOutPoint.lower(outpoint),
        _UniffiConverterTypeZcashTxOut.lower(txout),
        _UniffiConverterTypeZcashBlockHeight.lower(height))
        return cls._make_instance_(pointer)



    def height(self, ) -> "ZcashBlockHeight":
        return _UniffiConverterTypeZcashBlockHeight.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_height,self._pointer,)
        )






    def outpoint(self, ) -> "ZcashOutPoint":
        return _UniffiConverterTypeZcashOutPoint.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_outpoint,self._pointer,)
        )






    def recipient_address(self, ) -> "ZcashTransparentAddress":
        return _UniffiConverterTypeZcashTransparentAddress.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_recipient_address,self._pointer,)
        )






    def txout(self, ) -> "ZcashTxOut":
        return _UniffiConverterTypeZcashTxOut.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_txout,self._pointer,)
        )






    def value(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashwallettransparentoutput_value,self._pointer,)
        )






class _UniffiConverterTypeZcashWalletTransparentOutput:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletTransparentOutput):
            raise TypeError("Expected ZcashWalletTransparentOutput instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletTransparentOutput._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashWalletTx:
    _pointer: ctypes.c_void_p
    def __init__(self, txid: "ZcashTxId",index: "int",sapling_spends: "typing.List[ZcashWalletSaplingSpend]",sapling_outputs: "typing.List[ZcashWalletSaplingOutput]"):




        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashwallettx_new,
        _UniffiConverterTypeZcashTxId.lower(txid),
        _UniffiConverterUInt32.lower(index),
        _UniffiConverterSequenceTypeZcashWalletSaplingSpend.lower(sapling_spends),
        _UniffiConverterSequenceTypeZcashWalletSaplingOutput.lower(sapling_outputs))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashwallettx, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashWalletTx:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashWalletTx):
            raise TypeError("Expected ZcashWalletTx instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashWalletTx._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashZip317FeeRule:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317feerule, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def non_standard(cls, marginal_fee: "ZcashAmount",grace_actions: "int",p2pkh_standard_input_size: "int",p2pkh_standard_output_size: "int"):




        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_non_standard,
        _UniffiConverterTypeZcashAmount.lower(marginal_fee),
        _UniffiConverterUInt64.lower(grace_actions),
        _UniffiConverterUInt64.lower(p2pkh_standard_input_size),
        _UniffiConverterUInt64.lower(p2pkh_standard_output_size))
        return cls._make_instance_(pointer)


    @classmethod
    def standard(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317feerule_standard,)
        return cls._make_instance_(pointer)



    def marginal_fee(self, ) -> "ZcashAmount":
        return _UniffiConverterTypeZcashAmount.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_method_zcashzip317feerule_marginal_fee,self._pointer,)
        )






class _UniffiConverterTypeZcashZip317FeeRule:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashZip317FeeRule):
            raise TypeError("Expected ZcashZip317FeeRule instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashZip317FeeRule._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ZcashZip317SingleOutputChangeStrategy:
    _pointer: ctypes.c_void_p
    def __init__(self, fee_rule: "ZcashZip317FeeRule"):

        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_constructor_zcashzip317singleoutputchangestrategy_new,
        _UniffiConverterTypeZcashZip317FeeRule.lower(fee_rule))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_free_zcashzip317singleoutputchangestrategy, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


class _UniffiConverterTypeZcashZip317SingleOutputChangeStrategy:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ZcashZip317SingleOutputChangeStrategy):
            raise TypeError("Expected ZcashZip317SingleOutputChangeStrategy instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ZcashZip317SingleOutputChangeStrategy._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class TripleSaplingNullifierMap:
    txid: "ZcashTxId";tx_idx: "int";nullifiers: "typing.List[ZcashSaplingNullifier]";

    @typing.no_type_check
    def __init__(self, txid: "ZcashTxId", tx_idx: "int", nullifiers: "typing.List[ZcashSaplingNullifier]"):
        self.txid = txid
        self.tx_idx = tx_idx
        self.nullifiers = nullifiers

    def __str__(self):
        return "TripleSaplingNullifierMap(txid={}, tx_idx={}, nullifiers={})".format(self.txid, self.tx_idx, self.nullifiers)

    def __eq__(self, other):
        if self.txid != other.txid:
            return False
        if self.tx_idx != other.tx_idx:
            return False
        if self.nullifiers != other.nullifiers:
            return False
        return True

class _UniffiConverterTypeTripleSaplingNullifierMap(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TripleSaplingNullifierMap(
            txid=_UniffiConverterTypeZcashTxId.read(buf),
            tx_idx=_UniffiConverterUInt16.read(buf),
            nullifiers=_UniffiConverterSequenceTypeZcashSaplingNullifier.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashTxId.write(value.txid, buf)
        _UniffiConverterUInt16.write(value.tx_idx, buf)
        _UniffiConverterSequenceTypeZcashSaplingNullifier.write(value.nullifiers, buf)


class TupleAccountIdAndSaplingNote:
    account_id: "ZcashAccountId";sapling_note: "ZcashSaplingNote";

    @typing.no_type_check
    def __init__(self, account_id: "ZcashAccountId", sapling_note: "ZcashSaplingNote"):
        self.account_id = account_id
        self.sapling_note = sapling_note

    def __str__(self):
        return "TupleAccountIdAndSaplingNote(account_id={}, sapling_note={})".format(self.account_id, self.sapling_note)

    def __eq__(self, other):
        if self.account_id != other.account_id:
            return False
        if self.sapling_note != other.sapling_note:
            return False
        return True

class _UniffiConverterTypeTupleAccountIdAndSaplingNote(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleAccountIdAndSaplingNote(
            account_id=_UniffiConverterTypeZcashAccountId.read(buf),
            sapling_note=_UniffiConverterTypeZcashSaplingNote.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashAccountId.write(value.account_id, buf)
        _UniffiConverterTypeZcashSaplingNote.write(value.sapling_note, buf)


class TupleAccountIdAndSaplingNullifier:
    account_id: "ZcashAccountId";sapling_nullifier: "ZcashSaplingNullifier";

    @typing.no_type_check
    def __init__(self, account_id: "ZcashAccountId", sapling_nullifier: "ZcashSaplingNullifier"):
        self.account_id = account_id
        self.sapling_nullifier = sapling_nullifier

    def __str__(self):
        return "TupleAccountIdAndSaplingNullifier(account_id={}, sapling_nullifier={})".format(self.account_id, self.sapling_nullifier)

    def __eq__(self, other):
        if self.account_id != other.account_id:
            return False
        if self.sapling_nullifier != other.sapling_nullifier:
            return False
        return True

class _UniffiConverterTypeTupleAccountIdAndSaplingNullifier(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleAccountIdAndSaplingNullifier(
            account_id=_UniffiConverterTypeZcashAccountId.read(buf),
            sapling_nullifier=_UniffiConverterTypeZcashSaplingNullifier.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashAccountId.write(value.account_id, buf)
        _UniffiConverterTypeZcashSaplingNullifier.write(value.sapling_nullifier, buf)


class TupleAccountIdAndUnifiedSpendingKey:
    account_id: "ZcashAccountId";unified_spending_key: "ZcashUnifiedSpendingKey";

    @typing.no_type_check
    def __init__(self, account_id: "ZcashAccountId", unified_spending_key: "ZcashUnifiedSpendingKey"):
        self.account_id = account_id
        self.unified_spending_key = unified_spending_key

    def __str__(self):
        return "TupleAccountIdAndUnifiedSpendingKey(account_id={}, unified_spending_key={})".format(self.account_id, self.unified_spending_key)

    def __eq__(self, other):
        if self.account_id != other.account_id:
            return False
        if self.unified_spending_key != other.unified_spending_key:
            return False
        return True

class _UniffiConverterTypeTupleAccountIdAndUnifiedSpendingKey(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleAccountIdAndUnifiedSpendingKey(
            account_id=_UniffiConverterTypeZcashAccountId.read(buf),
            unified_spending_key=_UniffiConverterTypeZcashUnifiedSpendingKey.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashAccountId.write(value.account_id, buf)
        _UniffiConverterTypeZcashUnifiedSpendingKey.write(value.unified_spending_key, buf)


class TupleBlockHeightAndHash:
    block_height: "ZcashBlockHeight";block_hash: "ZcashBlockHash";

    @typing.no_type_check
    def __init__(self, block_height: "ZcashBlockHeight", block_hash: "ZcashBlockHash"):
        self.block_height = block_height
        self.block_hash = block_hash

    def __str__(self):
        return "TupleBlockHeightAndHash(block_height={}, block_hash={})".format(self.block_height, self.block_hash)

    def __eq__(self, other):
        if self.block_height != other.block_height:
            return False
        if self.block_hash != other.block_hash:
            return False
        return True

class _UniffiConverterTypeTupleBlockHeightAndHash(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleBlockHeightAndHash(
            block_height=_UniffiConverterTypeZcashBlockHeight.read(buf),
            block_hash=_UniffiConverterTypeZcashBlockHash.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashBlockHeight.write(value.block_height, buf)
        _UniffiConverterTypeZcashBlockHash.write(value.block_hash, buf)


class TupleSaplingCommitments:
    node: "ZcashSaplingNode";retention: "MerkleTreeRetention";

    @typing.no_type_check
    def __init__(self, node: "ZcashSaplingNode", retention: "MerkleTreeRetention"):
        self.node = node
        self.retention = retention

    def __str__(self):
        return "TupleSaplingCommitments(node={}, retention={})".format(self.node, self.retention)

    def __eq__(self, other):
        if self.node != other.node:
            return False
        if self.retention != other.retention:
            return False
        return True

class _UniffiConverterTypeTupleSaplingCommitments(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleSaplingCommitments(
            node=_UniffiConverterTypeZcashSaplingNode.read(buf),
            retention=_UniffiConverterTypeMerkleTreeRetention.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashSaplingNode.write(value.node, buf)
        _UniffiConverterTypeMerkleTreeRetention.write(value.retention, buf)


class TupleTargetAndAnchorHeight:
    target_height: "ZcashBlockHeight";anchor_height: "ZcashBlockHeight";

    @typing.no_type_check
    def __init__(self, target_height: "ZcashBlockHeight", anchor_height: "ZcashBlockHeight"):
        self.target_height = target_height
        self.anchor_height = anchor_height

    def __str__(self):
        return "TupleTargetAndAnchorHeight(target_height={}, anchor_height={})".format(self.target_height, self.anchor_height)

    def __eq__(self, other):
        if self.target_height != other.target_height:
            return False
        if self.anchor_height != other.anchor_height:
            return False
        return True

class _UniffiConverterTypeTupleTargetAndAnchorHeight(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TupleTargetAndAnchorHeight(
            target_height=_UniffiConverterTypeZcashBlockHeight.read(buf),
            anchor_height=_UniffiConverterTypeZcashBlockHeight.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashBlockHeight.write(value.target_height, buf)
        _UniffiConverterTypeZcashBlockHeight.write(value.anchor_height, buf)


class ZcashAccountId:
    id: "int";

    @typing.no_type_check
    def __init__(self, id: "int"):
        self.id = id

    def __str__(self):
        return "ZcashAccountId(id={})".format(self.id)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        return True

class _UniffiConverterTypeZcashAccountId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashAccountId(
            id=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.id, buf)


class ZcashAuthPath:
    node: "ZcashSaplingNode";

    @typing.no_type_check
    def __init__(self, node: "ZcashSaplingNode"):
        self.node = node

    def __str__(self):
        return "ZcashAuthPath(node={})".format(self.node)

    def __eq__(self, other):
        if self.node != other.node:
            return False
        return True

class _UniffiConverterTypeZcashAuthPath(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashAuthPath(
            node=_UniffiConverterTypeZcashSaplingNode.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashSaplingNode.write(value.node, buf)


class ZcashDiversifierIndexAndPaymentAddress:
    diversifier_index: "ZcashDiversifierIndex";address: "ZcashPaymentAddress";

    @typing.no_type_check
    def __init__(self, diversifier_index: "ZcashDiversifierIndex", address: "ZcashPaymentAddress"):
        self.diversifier_index = diversifier_index
        self.address = address

    def __str__(self):
        return "ZcashDiversifierIndexAndPaymentAddress(diversifier_index={}, address={})".format(self.diversifier_index, self.address)

    def __eq__(self, other):
        if self.diversifier_index != other.diversifier_index:
            return False
        if self.address != other.address:
            return False
        return True

class _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashDiversifierIndexAndPaymentAddress(
            diversifier_index=_UniffiConverterTypeZcashDiversifierIndex.read(buf),
            address=_UniffiConverterTypeZcashPaymentAddress.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashDiversifierIndex.write(value.diversifier_index, buf)
        _UniffiConverterTypeZcashPaymentAddress.write(value.address, buf)


class ZcashDiversifierIndexAndScope:
    diversifier_index: "ZcashDiversifierIndex";scope: "ZcashScope";

    @typing.no_type_check
    def __init__(self, diversifier_index: "ZcashDiversifierIndex", scope: "ZcashScope"):
        self.diversifier_index = diversifier_index
        self.scope = scope

    def __str__(self):
        return "ZcashDiversifierIndexAndScope(diversifier_index={}, scope={})".format(self.diversifier_index, self.scope)

    def __eq__(self, other):
        if self.diversifier_index != other.diversifier_index:
            return False
        if self.scope != other.scope:
            return False
        return True

class _UniffiConverterTypeZcashDiversifierIndexAndScope(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashDiversifierIndexAndScope(
            diversifier_index=_UniffiConverterTypeZcashDiversifierIndex.read(buf),
            scope=_UniffiConverterTypeZcashScope.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashDiversifierIndex.write(value.diversifier_index, buf)
        _UniffiConverterTypeZcashScope.write(value.scope, buf)


class ZcashInternalOvkExternalOvk:
    internal_ovk: "ZcashInternalOvk";external_ovk: "ZcashExternalOvk";

    @typing.no_type_check
    def __init__(self, internal_ovk: "ZcashInternalOvk", external_ovk: "ZcashExternalOvk"):
        self.internal_ovk = internal_ovk
        self.external_ovk = external_ovk

    def __str__(self):
        return "ZcashInternalOvkExternalOvk(internal_ovk={}, external_ovk={})".format(self.internal_ovk, self.external_ovk)

    def __eq__(self, other):
        if self.internal_ovk != other.internal_ovk:
            return False
        if self.external_ovk != other.external_ovk:
            return False
        return True

class _UniffiConverterTypeZcashInternalOvkExternalOvk(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashInternalOvkExternalOvk(
            internal_ovk=_UniffiConverterTypeZcashInternalOvk.read(buf),
            external_ovk=_UniffiConverterTypeZcashExternalOvk.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashInternalOvk.write(value.internal_ovk, buf)
        _UniffiConverterTypeZcashExternalOvk.write(value.external_ovk, buf)


class ZcashOrchardDecryptOutput:
    note: "ZcashOrchardNote";address: "ZcashOrchardAddress";data: "typing.List[int]";

    @typing.no_type_check
    def __init__(self, note: "ZcashOrchardNote", address: "ZcashOrchardAddress", data: "typing.List[int]"):
        self.note = note
        self.address = address
        self.data = data

    def __str__(self):
        return "ZcashOrchardDecryptOutput(note={}, address={}, data={})".format(self.note, self.address, self.data)

    def __eq__(self, other):
        if self.note != other.note:
            return False
        if self.address != other.address:
            return False
        if self.data != other.data:
            return False
        return True

class _UniffiConverterTypeZcashOrchardDecryptOutput(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashOrchardDecryptOutput(
            note=_UniffiConverterTypeZcashOrchardNote.read(buf),
            address=_UniffiConverterTypeZcashOrchardAddress.read(buf),
            data=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashOrchardNote.write(value.note, buf)
        _UniffiConverterTypeZcashOrchardAddress.write(value.address, buf)
        _UniffiConverterSequenceUInt8.write(value.data, buf)


class ZcashOrchardDecryptOutputForIncomingKeys:
    idx: "int";key: "ZcashOrchardIncomingViewingKey";note: "ZcashOrchardNote";address: "ZcashOrchardAddress";data: "typing.List[int]";

    @typing.no_type_check
    def __init__(self, idx: "int", key: "ZcashOrchardIncomingViewingKey", note: "ZcashOrchardNote", address: "ZcashOrchardAddress", data: "typing.List[int]"):
        self.idx = idx
        self.key = key
        self.note = note
        self.address = address
        self.data = data

    def __str__(self):
        return "ZcashOrchardDecryptOutputForIncomingKeys(idx={}, key={}, note={}, address={}, data={})".format(self.idx, self.key, self.note, self.address, self.data)

    def __eq__(self, other):
        if self.idx != other.idx:
            return False
        if self.key != other.key:
            return False
        if self.note != other.note:
            return False
        if self.address != other.address:
            return False
        if self.data != other.data:
            return False
        return True

class _UniffiConverterTypeZcashOrchardDecryptOutputForIncomingKeys(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashOrchardDecryptOutputForIncomingKeys(
            idx=_UniffiConverterUInt64.read(buf),
            key=_UniffiConverterTypeZcashOrchardIncomingViewingKey.read(buf),
            note=_UniffiConverterTypeZcashOrchardNote.read(buf),
            address=_UniffiConverterTypeZcashOrchardAddress.read(buf),
            data=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.idx, buf)
        _UniffiConverterTypeZcashOrchardIncomingViewingKey.write(value.key, buf)
        _UniffiConverterTypeZcashOrchardNote.write(value.note, buf)
        _UniffiConverterTypeZcashOrchardAddress.write(value.address, buf)
        _UniffiConverterSequenceUInt8.write(value.data, buf)


class ZcashOrchardDecryptOutputForOutgoingKeys:
    idx: "int";key: "ZcashOrchardOutgoingViewingKey";note: "ZcashOrchardNote";address: "ZcashOrchardAddress";data: "typing.List[int]";

    @typing.no_type_check
    def __init__(self, idx: "int", key: "ZcashOrchardOutgoingViewingKey", note: "ZcashOrchardNote", address: "ZcashOrchardAddress", data: "typing.List[int]"):
        self.idx = idx
        self.key = key
        self.note = note
        self.address = address
        self.data = data

    def __str__(self):
        return "ZcashOrchardDecryptOutputForOutgoingKeys(idx={}, key={}, note={}, address={}, data={})".format(self.idx, self.key, self.note, self.address, self.data)

    def __eq__(self, other):
        if self.idx != other.idx:
            return False
        if self.key != other.key:
            return False
        if self.note != other.note:
            return False
        if self.address != other.address:
            return False
        if self.data != other.data:
            return False
        return True

class _UniffiConverterTypeZcashOrchardDecryptOutputForOutgoingKeys(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashOrchardDecryptOutputForOutgoingKeys(
            idx=_UniffiConverterUInt64.read(buf),
            key=_UniffiConverterTypeZcashOrchardOutgoingViewingKey.read(buf),
            note=_UniffiConverterTypeZcashOrchardNote.read(buf),
            address=_UniffiConverterTypeZcashOrchardAddress.read(buf),
            data=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.idx, buf)
        _UniffiConverterTypeZcashOrchardOutgoingViewingKey.write(value.key, buf)
        _UniffiConverterTypeZcashOrchardNote.write(value.note, buf)
        _UniffiConverterTypeZcashOrchardAddress.write(value.address, buf)
        _UniffiConverterSequenceUInt8.write(value.data, buf)


class ZcashOrchardTransmittedNoteCiphertext:
    epk_bytes: "typing.List[int]";enc_ciphertext: "typing.List[int]";out_ciphertext: "typing.List[int]";

    @typing.no_type_check
    def __init__(self, epk_bytes: "typing.List[int]", enc_ciphertext: "typing.List[int]", out_ciphertext: "typing.List[int]"):
        self.epk_bytes = epk_bytes
        self.enc_ciphertext = enc_ciphertext
        self.out_ciphertext = out_ciphertext

    def __str__(self):
        return "ZcashOrchardTransmittedNoteCiphertext(epk_bytes={}, enc_ciphertext={}, out_ciphertext={})".format(self.epk_bytes, self.enc_ciphertext, self.out_ciphertext)

    def __eq__(self, other):
        if self.epk_bytes != other.epk_bytes:
            return False
        if self.enc_ciphertext != other.enc_ciphertext:
            return False
        if self.out_ciphertext != other.out_ciphertext:
            return False
        return True

class _UniffiConverterTypeZcashOrchardTransmittedNoteCiphertext(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashOrchardTransmittedNoteCiphertext(
            epk_bytes=_UniffiConverterSequenceUInt8.read(buf),
            enc_ciphertext=_UniffiConverterSequenceUInt8.read(buf),
            out_ciphertext=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceUInt8.write(value.epk_bytes, buf)
        _UniffiConverterSequenceUInt8.write(value.enc_ciphertext, buf)
        _UniffiConverterSequenceUInt8.write(value.out_ciphertext, buf)


class ZcashPayment:
    recipient_address: "ZcashRecipientAddress";amount: "ZcashAmount";memo: "typing.Optional[ZcashMemoBytes]";label: "typing.Optional[str]";message: "typing.Optional[str]";other_params: "typing.List[ZcashPaymentParam]";

    @typing.no_type_check
    def __init__(self, recipient_address: "ZcashRecipientAddress", amount: "ZcashAmount", memo: "typing.Optional[ZcashMemoBytes]", label: "typing.Optional[str]", message: "typing.Optional[str]", other_params: "typing.List[ZcashPaymentParam]"):
        self.recipient_address = recipient_address
        self.amount = amount
        self.memo = memo
        self.label = label
        self.message = message
        self.other_params = other_params

    def __str__(self):
        return "ZcashPayment(recipient_address={}, amount={}, memo={}, label={}, message={}, other_params={})".format(self.recipient_address, self.amount, self.memo, self.label, self.message, self.other_params)

    def __eq__(self, other):
        if self.recipient_address != other.recipient_address:
            return False
        if self.amount != other.amount:
            return False
        if self.memo != other.memo:
            return False
        if self.label != other.label:
            return False
        if self.message != other.message:
            return False
        if self.other_params != other.other_params:
            return False
        return True

class _UniffiConverterTypeZcashPayment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashPayment(
            recipient_address=_UniffiConverterTypeZcashRecipientAddress.read(buf),
            amount=_UniffiConverterTypeZcashAmount.read(buf),
            memo=_UniffiConverterOptionalTypeZcashMemoBytes.read(buf),
            label=_UniffiConverterOptionalString.read(buf),
            message=_UniffiConverterOptionalString.read(buf),
            other_params=_UniffiConverterSequenceTypeZcashPaymentParam.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashRecipientAddress.write(value.recipient_address, buf)
        _UniffiConverterTypeZcashAmount.write(value.amount, buf)
        _UniffiConverterOptionalTypeZcashMemoBytes.write(value.memo, buf)
        _UniffiConverterOptionalString.write(value.label, buf)
        _UniffiConverterOptionalString.write(value.message, buf)
        _UniffiConverterSequenceTypeZcashPaymentParam.write(value.other_params, buf)


class ZcashPaymentParam:
    key: "str";value: "str";

    @typing.no_type_check
    def __init__(self, key: "str", value: "str"):
        self.key = key
        self.value = value

    def __str__(self):
        return "ZcashPaymentParam(key={}, value={})".format(self.key, self.value)

    def __eq__(self, other):
        if self.key != other.key:
            return False
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeZcashPaymentParam(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashPaymentParam(
            key=_UniffiConverterString.read(buf),
            value=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.key, buf)
        _UniffiConverterString.write(value.value, buf)


class ZcashSentTransaction:
    tx: "ZcashTransaction";created: "TimeOffsetDateTime";account: "ZcashAccountId";outputs: "typing.List[ZcashSentTransactionOutput]";fee_amount: "ZcashAmount";utxos_spent: "typing.List[ZcashOutPoint]";

    @typing.no_type_check
    def __init__(self, tx: "ZcashTransaction", created: "TimeOffsetDateTime", account: "ZcashAccountId", outputs: "typing.List[ZcashSentTransactionOutput]", fee_amount: "ZcashAmount", utxos_spent: "typing.List[ZcashOutPoint]"):
        self.tx = tx
        self.created = created
        self.account = account
        self.outputs = outputs
        self.fee_amount = fee_amount
        self.utxos_spent = utxos_spent

    def __str__(self):
        return "ZcashSentTransaction(tx={}, created={}, account={}, outputs={}, fee_amount={}, utxos_spent={})".format(self.tx, self.created, self.account, self.outputs, self.fee_amount, self.utxos_spent)

    def __eq__(self, other):
        if self.tx != other.tx:
            return False
        if self.created != other.created:
            return False
        if self.account != other.account:
            return False
        if self.outputs != other.outputs:
            return False
        if self.fee_amount != other.fee_amount:
            return False
        if self.utxos_spent != other.utxos_spent:
            return False
        return True

class _UniffiConverterTypeZcashSentTransaction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashSentTransaction(
            tx=_UniffiConverterTypeZcashTransaction.read(buf),
            created=_UniffiConverterTypeTimeOffsetDateTime.read(buf),
            account=_UniffiConverterTypeZcashAccountId.read(buf),
            outputs=_UniffiConverterSequenceTypeZcashSentTransactionOutput.read(buf),
            fee_amount=_UniffiConverterTypeZcashAmount.read(buf),
            utxos_spent=_UniffiConverterSequenceTypeZcashOutPoint.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashTransaction.write(value.tx, buf)
        _UniffiConverterTypeTimeOffsetDateTime.write(value.created, buf)
        _UniffiConverterTypeZcashAccountId.write(value.account, buf)
        _UniffiConverterSequenceTypeZcashSentTransactionOutput.write(value.outputs, buf)
        _UniffiConverterTypeZcashAmount.write(value.fee_amount, buf)
        _UniffiConverterSequenceTypeZcashOutPoint.write(value.utxos_spent, buf)


class ZcashTransactionAndSaplingMetadata:
    transaction: "ZcashTransaction";sapling_metadata: "ZcashSaplingMetadata";

    @typing.no_type_check
    def __init__(self, transaction: "ZcashTransaction", sapling_metadata: "ZcashSaplingMetadata"):
        self.transaction = transaction
        self.sapling_metadata = sapling_metadata

    def __str__(self):
        return "ZcashTransactionAndSaplingMetadata(transaction={}, sapling_metadata={})".format(self.transaction, self.sapling_metadata)

    def __eq__(self, other):
        if self.transaction != other.transaction:
            return False
        if self.sapling_metadata != other.sapling_metadata:
            return False
        return True

class _UniffiConverterTypeZcashTransactionAndSaplingMetadata(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashTransactionAndSaplingMetadata(
            transaction=_UniffiConverterTypeZcashTransaction.read(buf),
            sapling_metadata=_UniffiConverterTypeZcashSaplingMetadata.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashTransaction.write(value.transaction, buf)
        _UniffiConverterTypeZcashSaplingMetadata.write(value.sapling_metadata, buf)


class ZcashTransparentAddressAndIndex:
    transparent_address: "ZcashTransparentAddress";index: "int";

    @typing.no_type_check
    def __init__(self, transparent_address: "ZcashTransparentAddress", index: "int"):
        self.transparent_address = transparent_address
        self.index = index

    def __str__(self):
        return "ZcashTransparentAddressAndIndex(transparent_address={}, index={})".format(self.transparent_address, self.index)

    def __eq__(self, other):
        if self.transparent_address != other.transparent_address:
            return False
        if self.index != other.index:
            return False
        return True

class _UniffiConverterTypeZcashTransparentAddressAndIndex(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashTransparentAddressAndIndex(
            transparent_address=_UniffiConverterTypeZcashTransparentAddress.read(buf),
            index=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashTransparentAddress.write(value.transparent_address, buf)
        _UniffiConverterUInt32.write(value.index, buf)


class ZcashUnifiedAddressAndDiversifierIndex:
    address: "ZcashUnifiedAddress";diversifier_index: "ZcashDiversifierIndex";

    @typing.no_type_check
    def __init__(self, address: "ZcashUnifiedAddress", diversifier_index: "ZcashDiversifierIndex"):
        self.address = address
        self.diversifier_index = diversifier_index

    def __str__(self):
        return "ZcashUnifiedAddressAndDiversifierIndex(address={}, diversifier_index={})".format(self.address, self.diversifier_index)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.diversifier_index != other.diversifier_index:
            return False
        return True

class _UniffiConverterTypeZcashUnifiedAddressAndDiversifierIndex(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ZcashUnifiedAddressAndDiversifierIndex(
            address=_UniffiConverterTypeZcashUnifiedAddress.read(buf),
            diversifier_index=_UniffiConverterTypeZcashDiversifierIndex.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeZcashUnifiedAddress.write(value.address, buf)
        _UniffiConverterTypeZcashDiversifierIndex.write(value.diversifier_index, buf)





class ZcashBranchId(enum.Enum):
    SPROUT = 1
    OVERWINTER = 2
    SAPLING = 3
    BLOSSOM = 4
    HEARTWOOD = 5
    CANOPY = 6
    NU5 = 7



class _UniffiConverterTypeZcashBranchId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashBranchId.SPROUT
        if variant == 2:
            return ZcashBranchId.OVERWINTER
        if variant == 3:
            return ZcashBranchId.SAPLING
        if variant == 4:
            return ZcashBranchId.BLOSSOM
        if variant == 5:
            return ZcashBranchId.HEARTWOOD
        if variant == 6:
            return ZcashBranchId.CANOPY
        if variant == 7:
            return ZcashBranchId.NU5
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashBranchId.SPROUT:
            buf.write_i32(1)
        if value == ZcashBranchId.OVERWINTER:
            buf.write_i32(2)
        if value == ZcashBranchId.SAPLING:
            buf.write_i32(3)
        if value == ZcashBranchId.BLOSSOM:
            buf.write_i32(4)
        if value == ZcashBranchId.HEARTWOOD:
            buf.write_i32(5)
        if value == ZcashBranchId.CANOPY:
            buf.write_i32(6)
        if value == ZcashBranchId.NU5:
            buf.write_i32(7)






class ZcashChildIndex:
    def __init__(self):
        raise RuntimeError("ZcashChildIndex cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class NON_HARDENED:
        v: "int";

        @typing.no_type_check
        def __init__(self,v: "int"):

            self.v = v


        def __str__(self):
            return "ZcashChildIndex.NON_HARDENED(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_non_hardened():
                return False
            if self.v != other.v:
                return False
            return True
    class HARDENED:
        v: "int";

        @typing.no_type_check
        def __init__(self,v: "int"):

            self.v = v


        def __str__(self):
            return "ZcashChildIndex.HARDENED(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_hardened():
                return False
            if self.v != other.v:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_non_hardened(self) -> bool:
        return isinstance(self, ZcashChildIndex.NON_HARDENED)
    def is_hardened(self) -> bool:
        return isinstance(self, ZcashChildIndex.HARDENED)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashChildIndex.NON_HARDENED = type("ZcashChildIndex.NON_HARDENED", (ZcashChildIndex.NON_HARDENED, ZcashChildIndex,), {})  # type: ignore
ZcashChildIndex.HARDENED = type("ZcashChildIndex.HARDENED", (ZcashChildIndex.HARDENED, ZcashChildIndex,), {})  # type: ignore




class _UniffiConverterTypeZcashChildIndex(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashChildIndex.NON_HARDENED(
                _UniffiConverterUInt32.read(buf),
            )
        if variant == 2:
            return ZcashChildIndex.HARDENED(
                _UniffiConverterUInt32.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_non_hardened():
            buf.write_i32(1)
            _UniffiConverterUInt32.write(value.v, buf)
        if value.is_hardened():
            buf.write_i32(2)
            _UniffiConverterUInt32.write(value.v, buf)






class ZcashConsensusParameters(enum.Enum):
    MAIN_NETWORK = 1
    TEST_NETWORK = 2



class _UniffiConverterTypeZcashConsensusParameters(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashConsensusParameters.MAIN_NETWORK
        if variant == 2:
            return ZcashConsensusParameters.TEST_NETWORK
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashConsensusParameters.MAIN_NETWORK:
            buf.write_i32(1)
        if value == ZcashConsensusParameters.TEST_NETWORK:
            buf.write_i32(2)






class ZcashDustAction(enum.Enum):
    REJECT = 1
    ALLOW_DUST_CHANGE = 2
    ADD_DUST_TO_FEE = 3



class _UniffiConverterTypeZcashDustAction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashDustAction.REJECT
        if variant == 2:
            return ZcashDustAction.ALLOW_DUST_CHANGE
        if variant == 3:
            return ZcashDustAction.ADD_DUST_TO_FEE
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashDustAction.REJECT:
            buf.write_i32(1)
        if value == ZcashDustAction.ALLOW_DUST_CHANGE:
            buf.write_i32(2)
        if value == ZcashDustAction.ADD_DUST_TO_FEE:
            buf.write_i32(3)



# ZcashError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ZcashError(Exception):
    pass

_UniffiTempZcashError = ZcashError

class ZcashError:  # type: ignore
    class HdWalletError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.HdWalletError({})".format(repr(str(self)))
    _UniffiTempZcashError.HdWalletError = HdWalletError # type: ignore
    class DecodingError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.DecodingError({})".format(repr(str(self)))
    _UniffiTempZcashError.DecodingError = DecodingError # type: ignore
    class DerivationError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.DerivationError({})".format(repr(str(self)))
    _UniffiTempZcashError.DerivationError = DerivationError # type: ignore
    class InvalidAsk(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.InvalidAsk({})".format(repr(str(self)))
    _UniffiTempZcashError.InvalidAsk = InvalidAsk # type: ignore
    class InvalidNsk(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.InvalidNsk({})".format(repr(str(self)))
    _UniffiTempZcashError.InvalidNsk = InvalidNsk # type: ignore
    class Message(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.Message({})".format(repr(str(self)))
    _UniffiTempZcashError.Message = Message # type: ignore
    class ArrayLengthMismatch(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.ArrayLengthMismatch({})".format(repr(str(self)))
    _UniffiTempZcashError.ArrayLengthMismatch = ArrayLengthMismatch # type: ignore
    class ValueOutOfRange(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.ValueOutOfRange({})".format(repr(str(self)))
    _UniffiTempZcashError.ValueOutOfRange = ValueOutOfRange # type: ignore
    class Secp256k1Error(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.Secp256k1Error({})".format(repr(str(self)))
    _UniffiTempZcashError.Secp256k1Error = Secp256k1Error # type: ignore
    class Bech32DecodeError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.Bech32DecodeError({})".format(repr(str(self)))
    _UniffiTempZcashError.Bech32DecodeError = Bech32DecodeError # type: ignore
    class Bs58Error(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.Bs58Error({})".format(repr(str(self)))
    _UniffiTempZcashError.Bs58Error = Bs58Error # type: ignore
    class BuilderError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.BuilderError({})".format(repr(str(self)))
    _UniffiTempZcashError.BuilderError = BuilderError # type: ignore
    class TransparentBuilderError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.TransparentBuilderError({})".format(repr(str(self)))
    _UniffiTempZcashError.TransparentBuilderError = TransparentBuilderError # type: ignore
    class SaplingBuilderError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.SaplingBuilderError({})".format(repr(str(self)))
    _UniffiTempZcashError.SaplingBuilderError = SaplingBuilderError # type: ignore
    class OrchardBuilderError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.OrchardBuilderError({})".format(repr(str(self)))
    _UniffiTempZcashError.OrchardBuilderError = OrchardBuilderError # type: ignore
    class OrchardBuilderSpendError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.OrchardBuilderSpendError({})".format(repr(str(self)))
    _UniffiTempZcashError.OrchardBuilderSpendError = OrchardBuilderSpendError # type: ignore
    class OrchardBuilderOutputError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.OrchardBuilderOutputError({})".format(repr(str(self)))
    _UniffiTempZcashError.OrchardBuilderOutputError = OrchardBuilderOutputError # type: ignore
    class InsufficientFundsError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.InsufficientFundsError({})".format(repr(str(self)))
    _UniffiTempZcashError.InsufficientFundsError = InsufficientFundsError # type: ignore
    class ChangeRequiredError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.ChangeRequiredError({})".format(repr(str(self)))
    _UniffiTempZcashError.ChangeRequiredError = ChangeRequiredError # type: ignore
    class BalanceError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.BalanceError({})".format(repr(str(self)))
    _UniffiTempZcashError.BalanceError = BalanceError # type: ignore
    class IoError(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.IoError({})".format(repr(str(self)))
    _UniffiTempZcashError.IoError = IoError # type: ignore
    class Unknown(_UniffiTempZcashError):
        def __repr__(self):
            return "ZcashError.Unknown({})".format(repr(str(self)))
    _UniffiTempZcashError.Unknown = Unknown # type: ignore

ZcashError = _UniffiTempZcashError # type: ignore
del _UniffiTempZcashError


class _UniffiConverterTypeZcashError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashError.HdWalletError(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ZcashError.DecodingError(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ZcashError.DerivationError(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return ZcashError.InvalidAsk(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return ZcashError.InvalidNsk(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return ZcashError.Message(
                _UniffiConverterString.read(buf),
            )
        if variant == 7:
            return ZcashError.ArrayLengthMismatch(
                _UniffiConverterString.read(buf),
            )
        if variant == 8:
            return ZcashError.ValueOutOfRange(
                _UniffiConverterString.read(buf),
            )
        if variant == 9:
            return ZcashError.Secp256k1Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 10:
            return ZcashError.Bech32DecodeError(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return ZcashError.Bs58Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 12:
            return ZcashError.BuilderError(
                _UniffiConverterString.read(buf),
            )
        if variant == 13:
            return ZcashError.TransparentBuilderError(
                _UniffiConverterString.read(buf),
            )
        if variant == 14:
            return ZcashError.SaplingBuilderError(
                _UniffiConverterString.read(buf),
            )
        if variant == 15:
            return ZcashError.OrchardBuilderError(
                _UniffiConverterString.read(buf),
            )
        if variant == 16:
            return ZcashError.OrchardBuilderSpendError(
                _UniffiConverterString.read(buf),
            )
        if variant == 17:
            return ZcashError.OrchardBuilderOutputError(
                _UniffiConverterString.read(buf),
            )
        if variant == 18:
            return ZcashError.InsufficientFundsError(
                _UniffiConverterString.read(buf),
            )
        if variant == 19:
            return ZcashError.ChangeRequiredError(
                _UniffiConverterString.read(buf),
            )
        if variant == 20:
            return ZcashError.BalanceError(
                _UniffiConverterString.read(buf),
            )
        if variant == 21:
            return ZcashError.IoError(
                _UniffiConverterString.read(buf),
            )
        if variant == 22:
            return ZcashError.Unknown(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ZcashError.HdWalletError):
            buf.write_i32(1)
        if isinstance(value, ZcashError.DecodingError):
            buf.write_i32(2)
        if isinstance(value, ZcashError.DerivationError):
            buf.write_i32(3)
        if isinstance(value, ZcashError.InvalidAsk):
            buf.write_i32(4)
        if isinstance(value, ZcashError.InvalidNsk):
            buf.write_i32(5)
        if isinstance(value, ZcashError.Message):
            buf.write_i32(6)
        if isinstance(value, ZcashError.ArrayLengthMismatch):
            buf.write_i32(7)
        if isinstance(value, ZcashError.ValueOutOfRange):
            buf.write_i32(8)
        if isinstance(value, ZcashError.Secp256k1Error):
            buf.write_i32(9)
        if isinstance(value, ZcashError.Bech32DecodeError):
            buf.write_i32(10)
        if isinstance(value, ZcashError.Bs58Error):
            buf.write_i32(11)
        if isinstance(value, ZcashError.BuilderError):
            buf.write_i32(12)
        if isinstance(value, ZcashError.TransparentBuilderError):
            buf.write_i32(13)
        if isinstance(value, ZcashError.SaplingBuilderError):
            buf.write_i32(14)
        if isinstance(value, ZcashError.OrchardBuilderError):
            buf.write_i32(15)
        if isinstance(value, ZcashError.OrchardBuilderSpendError):
            buf.write_i32(16)
        if isinstance(value, ZcashError.OrchardBuilderOutputError):
            buf.write_i32(17)
        if isinstance(value, ZcashError.InsufficientFundsError):
            buf.write_i32(18)
        if isinstance(value, ZcashError.ChangeRequiredError):
            buf.write_i32(19)
        if isinstance(value, ZcashError.BalanceError):
            buf.write_i32(20)
        if isinstance(value, ZcashError.IoError):
            buf.write_i32(21)
        if isinstance(value, ZcashError.Unknown):
            buf.write_i32(22)





class ZcashFeeRules:
    def __init__(self):
        raise RuntimeError("ZcashFeeRules cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class FIXED_STANDARD:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashFeeRules.FIXED_STANDARD()".format()

        def __eq__(self, other):
            if not other.is_fixed_standard():
                return False
            return True
    class FIXED_NON_STANDARD:
        amount: "int";

        @typing.no_type_check
        def __init__(self,amount: "int"):

            self.amount = amount


        def __str__(self):
            return "ZcashFeeRules.FIXED_NON_STANDARD(amount={})".format(self.amount)

        def __eq__(self, other):
            if not other.is_fixed_non_standard():
                return False
            if self.amount != other.amount:
                return False
            return True
    class ZIP317_STANDARD:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashFeeRules.ZIP317_STANDARD()".format()

        def __eq__(self, other):
            if not other.is_zip317_standard():
                return False
            return True
    class ZIP317_NON_STANDARD:
        marginal_fee: "int";grace_actions: "int";p2pkh_standard_input_size: "int";p2pkh_standard_output_size: "int";

        @typing.no_type_check
        def __init__(self,marginal_fee: "int", grace_actions: "int", p2pkh_standard_input_size: "int", p2pkh_standard_output_size: "int"):

            self.marginal_fee = marginal_fee
            self.grace_actions = grace_actions
            self.p2pkh_standard_input_size = p2pkh_standard_input_size
            self.p2pkh_standard_output_size = p2pkh_standard_output_size


        def __str__(self):
            return "ZcashFeeRules.ZIP317_NON_STANDARD(marginal_fee={}, grace_actions={}, p2pkh_standard_input_size={}, p2pkh_standard_output_size={})".format(self.marginal_fee, self.grace_actions, self.p2pkh_standard_input_size, self.p2pkh_standard_output_size)

        def __eq__(self, other):
            if not other.is_zip317_non_standard():
                return False
            if self.marginal_fee != other.marginal_fee:
                return False
            if self.grace_actions != other.grace_actions:
                return False
            if self.p2pkh_standard_input_size != other.p2pkh_standard_input_size:
                return False
            if self.p2pkh_standard_output_size != other.p2pkh_standard_output_size:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_fixed_standard(self) -> bool:
        return isinstance(self, ZcashFeeRules.FIXED_STANDARD)
    def is_fixed_non_standard(self) -> bool:
        return isinstance(self, ZcashFeeRules.FIXED_NON_STANDARD)
    def is_zip317_standard(self) -> bool:
        return isinstance(self, ZcashFeeRules.ZIP317_STANDARD)
    def is_zip317_non_standard(self) -> bool:
        return isinstance(self, ZcashFeeRules.ZIP317_NON_STANDARD)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashFeeRules.FIXED_STANDARD = type("ZcashFeeRules.FIXED_STANDARD", (ZcashFeeRules.FIXED_STANDARD, ZcashFeeRules,), {})  # type: ignore
ZcashFeeRules.FIXED_NON_STANDARD = type("ZcashFeeRules.FIXED_NON_STANDARD", (ZcashFeeRules.FIXED_NON_STANDARD, ZcashFeeRules,), {})  # type: ignore
ZcashFeeRules.ZIP317_STANDARD = type("ZcashFeeRules.ZIP317_STANDARD", (ZcashFeeRules.ZIP317_STANDARD, ZcashFeeRules,), {})  # type: ignore
ZcashFeeRules.ZIP317_NON_STANDARD = type("ZcashFeeRules.ZIP317_NON_STANDARD", (ZcashFeeRules.ZIP317_NON_STANDARD, ZcashFeeRules,), {})  # type: ignore




class _UniffiConverterTypeZcashFeeRules(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashFeeRules.FIXED_STANDARD(
            )
        if variant == 2:
            return ZcashFeeRules.FIXED_NON_STANDARD(
                _UniffiConverterUInt64.read(buf),
            )
        if variant == 3:
            return ZcashFeeRules.ZIP317_STANDARD(
            )
        if variant == 4:
            return ZcashFeeRules.ZIP317_NON_STANDARD(
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_fixed_standard():
            buf.write_i32(1)
        if value.is_fixed_non_standard():
            buf.write_i32(2)
            _UniffiConverterUInt64.write(value.amount, buf)
        if value.is_zip317_standard():
            buf.write_i32(3)
        if value.is_zip317_non_standard():
            buf.write_i32(4)
            _UniffiConverterUInt64.write(value.marginal_fee, buf)
            _UniffiConverterUInt64.write(value.grace_actions, buf)
            _UniffiConverterUInt64.write(value.p2pkh_standard_input_size, buf)
            _UniffiConverterUInt64.write(value.p2pkh_standard_output_size, buf)






class ZcashKeySeed(enum.Enum):
    S128 = 1
    S256 = 2
    S512 = 3



class _UniffiConverterTypeZcashKeySeed(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashKeySeed.S128
        if variant == 2:
            return ZcashKeySeed.S256
        if variant == 3:
            return ZcashKeySeed.S512
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashKeySeed.S128:
            buf.write_i32(1)
        if value == ZcashKeySeed.S256:
            buf.write_i32(2)
        if value == ZcashKeySeed.S512:
            buf.write_i32(3)






class ZcashKeysEra(enum.Enum):
    ORCHARD = 1



class _UniffiConverterTypeZcashKeysEra(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashKeysEra.ORCHARD
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashKeysEra.ORCHARD:
            buf.write_i32(1)






class ZcashMemo:
    def __init__(self):
        raise RuntimeError("ZcashMemo cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class EMPTY:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashMemo.EMPTY()".format()

        def __eq__(self, other):
            if not other.is_empty():
                return False
            return True
    class TEXT:
        v: "str";

        @typing.no_type_check
        def __init__(self,v: "str"):

            self.v = v


        def __str__(self):
            return "ZcashMemo.TEXT(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_text():
                return False
            if self.v != other.v:
                return False
            return True
    class FUTURE:
        v: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,v: "typing.List[int]"):

            self.v = v


        def __str__(self):
            return "ZcashMemo.FUTURE(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_future():
                return False
            if self.v != other.v:
                return False
            return True
    class ARBITRARY:
        v: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,v: "typing.List[int]"):

            self.v = v


        def __str__(self):
            return "ZcashMemo.ARBITRARY(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_arbitrary():
                return False
            if self.v != other.v:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_empty(self) -> bool:
        return isinstance(self, ZcashMemo.EMPTY)
    def is_text(self) -> bool:
        return isinstance(self, ZcashMemo.TEXT)
    def is_future(self) -> bool:
        return isinstance(self, ZcashMemo.FUTURE)
    def is_arbitrary(self) -> bool:
        return isinstance(self, ZcashMemo.ARBITRARY)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashMemo.EMPTY = type("ZcashMemo.EMPTY", (ZcashMemo.EMPTY, ZcashMemo,), {})  # type: ignore
ZcashMemo.TEXT = type("ZcashMemo.TEXT", (ZcashMemo.TEXT, ZcashMemo,), {})  # type: ignore
ZcashMemo.FUTURE = type("ZcashMemo.FUTURE", (ZcashMemo.FUTURE, ZcashMemo,), {})  # type: ignore
ZcashMemo.ARBITRARY = type("ZcashMemo.ARBITRARY", (ZcashMemo.ARBITRARY, ZcashMemo,), {})  # type: ignore




class _UniffiConverterTypeZcashMemo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashMemo.EMPTY(
            )
        if variant == 2:
            return ZcashMemo.TEXT(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ZcashMemo.FUTURE(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        if variant == 4:
            return ZcashMemo.ARBITRARY(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_empty():
            buf.write_i32(1)
        if value.is_text():
            buf.write_i32(2)
            _UniffiConverterString.write(value.v, buf)
        if value.is_future():
            buf.write_i32(3)
            _UniffiConverterSequenceUInt8.write(value.v, buf)
        if value.is_arbitrary():
            buf.write_i32(4)
            _UniffiConverterSequenceUInt8.write(value.v, buf)






class ZcashNullifierQuery(enum.Enum):
    UNSPENT = 1
    ALL = 2



class _UniffiConverterTypeZcashNullifierQuery(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashNullifierQuery.UNSPENT
        if variant == 2:
            return ZcashNullifierQuery.ALL
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashNullifierQuery.UNSPENT:
            buf.write_i32(1)
        if value == ZcashNullifierQuery.ALL:
            buf.write_i32(2)






class ZcashOrchardScope(enum.Enum):
    EXTERNAL = 1
    INTERNAL = 2



class _UniffiConverterTypeZcashOrchardScope(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashOrchardScope.EXTERNAL
        if variant == 2:
            return ZcashOrchardScope.INTERNAL
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashOrchardScope.EXTERNAL:
            buf.write_i32(1)
        if value == ZcashOrchardScope.INTERNAL:
            buf.write_i32(2)






class ZcashOvkPolicy:
    def __init__(self):
        raise RuntimeError("ZcashOvkPolicy cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class SENDER:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashOvkPolicy.SENDER()".format()

        def __eq__(self, other):
            if not other.is_sender():
                return False
            return True
    class CUSTOM:
        bytes: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,bytes: "typing.List[int]"):

            self.bytes = bytes


        def __str__(self):
            return "ZcashOvkPolicy.CUSTOM(bytes={})".format(self.bytes)

        def __eq__(self, other):
            if not other.is_custom():
                return False
            if self.bytes != other.bytes:
                return False
            return True
    class DISCARD:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashOvkPolicy.DISCARD()".format()

        def __eq__(self, other):
            if not other.is_discard():
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_sender(self) -> bool:
        return isinstance(self, ZcashOvkPolicy.SENDER)
    def is_custom(self) -> bool:
        return isinstance(self, ZcashOvkPolicy.CUSTOM)
    def is_discard(self) -> bool:
        return isinstance(self, ZcashOvkPolicy.DISCARD)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashOvkPolicy.SENDER = type("ZcashOvkPolicy.SENDER", (ZcashOvkPolicy.SENDER, ZcashOvkPolicy,), {})  # type: ignore
ZcashOvkPolicy.CUSTOM = type("ZcashOvkPolicy.CUSTOM", (ZcashOvkPolicy.CUSTOM, ZcashOvkPolicy,), {})  # type: ignore
ZcashOvkPolicy.DISCARD = type("ZcashOvkPolicy.DISCARD", (ZcashOvkPolicy.DISCARD, ZcashOvkPolicy,), {})  # type: ignore




class _UniffiConverterTypeZcashOvkPolicy(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashOvkPolicy.SENDER(
            )
        if variant == 2:
            return ZcashOvkPolicy.CUSTOM(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        if variant == 3:
            return ZcashOvkPolicy.DISCARD(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_sender():
            buf.write_i32(1)
        if value.is_custom():
            buf.write_i32(2)
            _UniffiConverterSequenceUInt8.write(value.bytes, buf)
        if value.is_discard():
            buf.write_i32(3)






class ZcashPoolType:
    def __init__(self):
        raise RuntimeError("ZcashPoolType cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class TRANSPARENT:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashPoolType.TRANSPARENT()".format()

        def __eq__(self, other):
            if not other.is_transparent():
                return False
            return True
    class SHIELDED:
        v: "ZcashShieldedProtocol";

        @typing.no_type_check
        def __init__(self,v: "ZcashShieldedProtocol"):

            self.v = v


        def __str__(self):
            return "ZcashPoolType.SHIELDED(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_shielded():
                return False
            if self.v != other.v:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_transparent(self) -> bool:
        return isinstance(self, ZcashPoolType.TRANSPARENT)
    def is_shielded(self) -> bool:
        return isinstance(self, ZcashPoolType.SHIELDED)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashPoolType.TRANSPARENT = type("ZcashPoolType.TRANSPARENT", (ZcashPoolType.TRANSPARENT, ZcashPoolType,), {})  # type: ignore
ZcashPoolType.SHIELDED = type("ZcashPoolType.SHIELDED", (ZcashPoolType.SHIELDED, ZcashPoolType,), {})  # type: ignore




class _UniffiConverterTypeZcashPoolType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashPoolType.TRANSPARENT(
            )
        if variant == 2:
            return ZcashPoolType.SHIELDED(
                _UniffiConverterTypeZcashShieldedProtocol.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_transparent():
            buf.write_i32(1)
        if value.is_shielded():
            buf.write_i32(2)
            _UniffiConverterTypeZcashShieldedProtocol.write(value.v, buf)






class ZcashRecipient:
    def __init__(self):
        raise RuntimeError("ZcashRecipient cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class TRANSPARENT:
        script: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,script: "typing.List[int]"):

            self.script = script


        def __str__(self):
            return "ZcashRecipient.TRANSPARENT(script={})".format(self.script)

        def __eq__(self, other):
            if not other.is_transparent():
                return False
            if self.script != other.script:
                return False
            return True
    class SAPLING:
        payment_address_bytes: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,payment_address_bytes: "typing.List[int]"):

            self.payment_address_bytes = payment_address_bytes


        def __str__(self):
            return "ZcashRecipient.SAPLING(payment_address_bytes={})".format(self.payment_address_bytes)

        def __eq__(self, other):
            if not other.is_sapling():
                return False
            if self.payment_address_bytes != other.payment_address_bytes:
                return False
            return True
    class UNIFIED:
        uae: "str";params: "ZcashConsensusParameters";zpt: "ZcashPoolType";

        @typing.no_type_check
        def __init__(self,uae: "str", params: "ZcashConsensusParameters", zpt: "ZcashPoolType"):

            self.uae = uae
            self.params = params
            self.zpt = zpt


        def __str__(self):
            return "ZcashRecipient.UNIFIED(uae={}, params={}, zpt={})".format(self.uae, self.params, self.zpt)

        def __eq__(self, other):
            if not other.is_unified():
                return False
            if self.uae != other.uae:
                return False
            if self.params != other.params:
                return False
            if self.zpt != other.zpt:
                return False
            return True
    class INTERNAL_ACCOUNT:
        aid: "ZcashAccountId";zpt: "ZcashPoolType";

        @typing.no_type_check
        def __init__(self,aid: "ZcashAccountId", zpt: "ZcashPoolType"):

            self.aid = aid
            self.zpt = zpt


        def __str__(self):
            return "ZcashRecipient.INTERNAL_ACCOUNT(aid={}, zpt={})".format(self.aid, self.zpt)

        def __eq__(self, other):
            if not other.is_internal_account():
                return False
            if self.aid != other.aid:
                return False
            if self.zpt != other.zpt:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_transparent(self) -> bool:
        return isinstance(self, ZcashRecipient.TRANSPARENT)
    def is_sapling(self) -> bool:
        return isinstance(self, ZcashRecipient.SAPLING)
    def is_unified(self) -> bool:
        return isinstance(self, ZcashRecipient.UNIFIED)
    def is_internal_account(self) -> bool:
        return isinstance(self, ZcashRecipient.INTERNAL_ACCOUNT)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashRecipient.TRANSPARENT = type("ZcashRecipient.TRANSPARENT", (ZcashRecipient.TRANSPARENT, ZcashRecipient,), {})  # type: ignore
ZcashRecipient.SAPLING = type("ZcashRecipient.SAPLING", (ZcashRecipient.SAPLING, ZcashRecipient,), {})  # type: ignore
ZcashRecipient.UNIFIED = type("ZcashRecipient.UNIFIED", (ZcashRecipient.UNIFIED, ZcashRecipient,), {})  # type: ignore
ZcashRecipient.INTERNAL_ACCOUNT = type("ZcashRecipient.INTERNAL_ACCOUNT", (ZcashRecipient.INTERNAL_ACCOUNT, ZcashRecipient,), {})  # type: ignore




class _UniffiConverterTypeZcashRecipient(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashRecipient.TRANSPARENT(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        if variant == 2:
            return ZcashRecipient.SAPLING(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        if variant == 3:
            return ZcashRecipient.UNIFIED(
                _UniffiConverterString.read(buf),
                _UniffiConverterTypeZcashConsensusParameters.read(buf),
                _UniffiConverterTypeZcashPoolType.read(buf),
            )
        if variant == 4:
            return ZcashRecipient.INTERNAL_ACCOUNT(
                _UniffiConverterTypeZcashAccountId.read(buf),
                _UniffiConverterTypeZcashPoolType.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_transparent():
            buf.write_i32(1)
            _UniffiConverterSequenceUInt8.write(value.script, buf)
        if value.is_sapling():
            buf.write_i32(2)
            _UniffiConverterSequenceUInt8.write(value.payment_address_bytes, buf)
        if value.is_unified():
            buf.write_i32(3)
            _UniffiConverterString.write(value.uae, buf)
            _UniffiConverterTypeZcashConsensusParameters.write(value.params, buf)
            _UniffiConverterTypeZcashPoolType.write(value.zpt, buf)
        if value.is_internal_account():
            buf.write_i32(4)
            _UniffiConverterTypeZcashAccountId.write(value.aid, buf)
            _UniffiConverterTypeZcashPoolType.write(value.zpt, buf)






class ZcashRseed:
    def __init__(self):
        raise RuntimeError("ZcashRseed cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class BEFORE_ZIP212:
        fr_data: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,fr_data: "typing.List[int]"):

            self.fr_data = fr_data


        def __str__(self):
            return "ZcashRseed.BEFORE_ZIP212(fr_data={})".format(self.fr_data)

        def __eq__(self, other):
            if not other.is_before_zip212():
                return False
            if self.fr_data != other.fr_data:
                return False
            return True
    class AFTER_ZIP212:
        data: "typing.List[int]";

        @typing.no_type_check
        def __init__(self,data: "typing.List[int]"):

            self.data = data


        def __str__(self):
            return "ZcashRseed.AFTER_ZIP212(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_after_zip212():
                return False
            if self.data != other.data:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_before_zip212(self) -> bool:
        return isinstance(self, ZcashRseed.BEFORE_ZIP212)
    def is_after_zip212(self) -> bool:
        return isinstance(self, ZcashRseed.AFTER_ZIP212)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashRseed.BEFORE_ZIP212 = type("ZcashRseed.BEFORE_ZIP212", (ZcashRseed.BEFORE_ZIP212, ZcashRseed,), {})  # type: ignore
ZcashRseed.AFTER_ZIP212 = type("ZcashRseed.AFTER_ZIP212", (ZcashRseed.AFTER_ZIP212, ZcashRseed,), {})  # type: ignore




class _UniffiConverterTypeZcashRseed(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashRseed.BEFORE_ZIP212(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        if variant == 2:
            return ZcashRseed.AFTER_ZIP212(
                _UniffiConverterSequenceUInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_before_zip212():
            buf.write_i32(1)
            _UniffiConverterSequenceUInt8.write(value.fr_data, buf)
        if value.is_after_zip212():
            buf.write_i32(2)
            _UniffiConverterSequenceUInt8.write(value.data, buf)






class ZcashScanPriority(enum.Enum):
    IGNORED = 1
    SCANNED = 2
    HISTORIC = 3
    OPEN_ADJACENT = 4
    FOUND_NOTE = 5
    CHAIN_TIP = 6
    VERIFY = 7



class _UniffiConverterTypeZcashScanPriority(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashScanPriority.IGNORED
        if variant == 2:
            return ZcashScanPriority.SCANNED
        if variant == 3:
            return ZcashScanPriority.HISTORIC
        if variant == 4:
            return ZcashScanPriority.OPEN_ADJACENT
        if variant == 5:
            return ZcashScanPriority.FOUND_NOTE
        if variant == 6:
            return ZcashScanPriority.CHAIN_TIP
        if variant == 7:
            return ZcashScanPriority.VERIFY
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashScanPriority.IGNORED:
            buf.write_i32(1)
        if value == ZcashScanPriority.SCANNED:
            buf.write_i32(2)
        if value == ZcashScanPriority.HISTORIC:
            buf.write_i32(3)
        if value == ZcashScanPriority.OPEN_ADJACENT:
            buf.write_i32(4)
        if value == ZcashScanPriority.FOUND_NOTE:
            buf.write_i32(5)
        if value == ZcashScanPriority.CHAIN_TIP:
            buf.write_i32(6)
        if value == ZcashScanPriority.VERIFY:
            buf.write_i32(7)






class ZcashScope(enum.Enum):
    EXTERNAL = 1
    INTERNAL = 2



class _UniffiConverterTypeZcashScope(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashScope.EXTERNAL
        if variant == 2:
            return ZcashScope.INTERNAL
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashScope.EXTERNAL:
            buf.write_i32(1)
        if value == ZcashScope.INTERNAL:
            buf.write_i32(2)






class ZcashShieldedProtocol(enum.Enum):
    SAPLING = 1



class _UniffiConverterTypeZcashShieldedProtocol(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashShieldedProtocol.SAPLING
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashShieldedProtocol.SAPLING:
            buf.write_i32(1)






class ZcashTransferType(enum.Enum):
    INCOMING = 1
    WALLET_INTERNAL = 2
    OUTGOING = 3



class _UniffiConverterTypeZcashTransferType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashTransferType.INCOMING
        if variant == 2:
            return ZcashTransferType.WALLET_INTERNAL
        if variant == 3:
            return ZcashTransferType.OUTGOING
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == ZcashTransferType.INCOMING:
            buf.write_i32(1)
        if value == ZcashTransferType.WALLET_INTERNAL:
            buf.write_i32(2)
        if value == ZcashTransferType.OUTGOING:
            buf.write_i32(3)






class ZcashTxVersionSelection:
    def __init__(self):
        raise RuntimeError("ZcashTxVersionSelection cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class SPROUT:
        v: "int";

        @typing.no_type_check
        def __init__(self,v: "int"):

            self.v = v


        def __str__(self):
            return "ZcashTxVersionSelection.SPROUT(v={})".format(self.v)

        def __eq__(self, other):
            if not other.is_sprout():
                return False
            if self.v != other.v:
                return False
            return True
    class OVERWINTER:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashTxVersionSelection.OVERWINTER()".format()

        def __eq__(self, other):
            if not other.is_overwinter():
                return False
            return True
    class SAPLING:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashTxVersionSelection.SAPLING()".format()

        def __eq__(self, other):
            if not other.is_sapling():
                return False
            return True
    class ZIP225:


        @typing.no_type_check
        def __init__(self,):

            pass


        def __str__(self):
            return "ZcashTxVersionSelection.ZIP225()".format()

        def __eq__(self, other):
            if not other.is_zip225():
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_sprout(self) -> bool:
        return isinstance(self, ZcashTxVersionSelection.SPROUT)
    def is_overwinter(self) -> bool:
        return isinstance(self, ZcashTxVersionSelection.OVERWINTER)
    def is_sapling(self) -> bool:
        return isinstance(self, ZcashTxVersionSelection.SAPLING)
    def is_zip225(self) -> bool:
        return isinstance(self, ZcashTxVersionSelection.ZIP225)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ZcashTxVersionSelection.SPROUT = type("ZcashTxVersionSelection.SPROUT", (ZcashTxVersionSelection.SPROUT, ZcashTxVersionSelection,), {})  # type: ignore
ZcashTxVersionSelection.OVERWINTER = type("ZcashTxVersionSelection.OVERWINTER", (ZcashTxVersionSelection.OVERWINTER, ZcashTxVersionSelection,), {})  # type: ignore
ZcashTxVersionSelection.SAPLING = type("ZcashTxVersionSelection.SAPLING", (ZcashTxVersionSelection.SAPLING, ZcashTxVersionSelection,), {})  # type: ignore
ZcashTxVersionSelection.ZIP225 = type("ZcashTxVersionSelection.ZIP225", (ZcashTxVersionSelection.ZIP225, ZcashTxVersionSelection,), {})  # type: ignore




class _UniffiConverterTypeZcashTxVersionSelection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashTxVersionSelection.SPROUT(
                _UniffiConverterUInt32.read(buf),
            )
        if variant == 2:
            return ZcashTxVersionSelection.OVERWINTER(
            )
        if variant == 3:
            return ZcashTxVersionSelection.SAPLING(
            )
        if variant == 4:
            return ZcashTxVersionSelection.ZIP225(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_sprout():
            buf.write_i32(1)
            _UniffiConverterUInt32.write(value.v, buf)
        if value.is_overwinter():
            buf.write_i32(2)
        if value.is_sapling():
            buf.write_i32(3)
        if value.is_zip225():
            buf.write_i32(4)



# ZcashWalletMigrationError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ZcashWalletMigrationError(Exception):
    pass

_UniffiTempZcashWalletMigrationError = ZcashWalletMigrationError

class ZcashWalletMigrationError:  # type: ignore
    class SeedRequired(_UniffiTempZcashWalletMigrationError):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashWalletMigrationError.SeedRequired({})".format(str(self))
    _UniffiTempZcashWalletMigrationError.SeedRequired = SeedRequired # type: ignore
    class CorruptedData(_UniffiTempZcashWalletMigrationError):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashWalletMigrationError.CorruptedData({})".format(str(self))
    _UniffiTempZcashWalletMigrationError.CorruptedData = CorruptedData # type: ignore
    class DbError(_UniffiTempZcashWalletMigrationError):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashWalletMigrationError.DbError({})".format(str(self))
    _UniffiTempZcashWalletMigrationError.DbError = DbError # type: ignore
    class BalanceError(_UniffiTempZcashWalletMigrationError):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashWalletMigrationError.BalanceError({})".format(str(self))
    _UniffiTempZcashWalletMigrationError.BalanceError = BalanceError # type: ignore
    class CommitmentTreeError(_UniffiTempZcashWalletMigrationError):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashWalletMigrationError.CommitmentTreeError({})".format(str(self))
    _UniffiTempZcashWalletMigrationError.CommitmentTreeError = CommitmentTreeError # type: ignore

ZcashWalletMigrationError = _UniffiTempZcashWalletMigrationError # type: ignore
del _UniffiTempZcashWalletMigrationError


class _UniffiConverterTypeZcashWalletMigrationError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashWalletMigrationError.SeedRequired(
                v=_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ZcashWalletMigrationError.CorruptedData(
                v=_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ZcashWalletMigrationError.DbError(
                v=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return ZcashWalletMigrationError.BalanceError(
                v=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return ZcashWalletMigrationError.CommitmentTreeError(
                v=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ZcashWalletMigrationError.SeedRequired):
            buf.write_i32(1)
            _UniffiConverterString.write(value.v, buf)
        if isinstance(value, ZcashWalletMigrationError.CorruptedData):
            buf.write_i32(2)
            _UniffiConverterString.write(value.v, buf)
        if isinstance(value, ZcashWalletMigrationError.DbError):
            buf.write_i32(3)
            _UniffiConverterString.write(value.v, buf)
        if isinstance(value, ZcashWalletMigrationError.BalanceError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.v, buf)
        if isinstance(value, ZcashWalletMigrationError.CommitmentTreeError):
            buf.write_i32(5)
            _UniffiConverterString.write(value.v, buf)


# ZcashZip321Error
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ZcashZip321Error(Exception):
    pass

_UniffiTempZcashZip321Error = ZcashZip321Error

class ZcashZip321Error:  # type: ignore
    class TooManyPayments(_UniffiTempZcashZip321Error):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashZip321Error.TooManyPayments({})".format(str(self))
    _UniffiTempZcashZip321Error.TooManyPayments = TooManyPayments # type: ignore
    class TransparentMemo(_UniffiTempZcashZip321Error):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashZip321Error.TransparentMemo({})".format(str(self))
    _UniffiTempZcashZip321Error.TransparentMemo = TransparentMemo # type: ignore
    class RecipientMissing(_UniffiTempZcashZip321Error):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashZip321Error.RecipientMissing({})".format(str(self))
    _UniffiTempZcashZip321Error.RecipientMissing = RecipientMissing # type: ignore
    class ParseError(_UniffiTempZcashZip321Error):
        def __init__(self, v):
            super().__init__(", ".join([
                "v={!r}".format(v),
            ]))
            self.v = v
        def __repr__(self):
            return "ZcashZip321Error.ParseError({})".format(str(self))
    _UniffiTempZcashZip321Error.ParseError = ParseError # type: ignore

ZcashZip321Error = _UniffiTempZcashZip321Error # type: ignore
del _UniffiTempZcashZip321Error


class _UniffiConverterTypeZcashZip321Error(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ZcashZip321Error.TooManyPayments(
                v=_UniffiConverterUInt32.read(buf),
            )
        if variant == 2:
            return ZcashZip321Error.TransparentMemo(
                v=_UniffiConverterUInt32.read(buf),
            )
        if variant == 3:
            return ZcashZip321Error.RecipientMissing(
                v=_UniffiConverterUInt32.read(buf),
            )
        if variant == 4:
            return ZcashZip321Error.ParseError(
                v=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ZcashZip321Error.TooManyPayments):
            buf.write_i32(1)
            _UniffiConverterUInt32.write(value.v, buf)
        if isinstance(value, ZcashZip321Error.TransparentMemo):
            buf.write_i32(2)
            _UniffiConverterUInt32.write(value.v, buf)
        if isinstance(value, ZcashZip321Error.RecipientMissing):
            buf.write_i32(3)
            _UniffiConverterUInt32.write(value.v, buf)
        if isinstance(value, ZcashZip321Error.ParseError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.v, buf)



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashAccountPubKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashAccountPubKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashAccountPubKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashAmount(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashAmount.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashAmount.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashBlockHash(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashBlockHash.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashBlockHash.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashBlockHeight(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashBlockHeight.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashBlockHeight.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashBlockMeta(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashBlockMeta.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashBlockMeta.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashBlockMetadata(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashBlockMetadata.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashBlockMetadata.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashDiversifiableFullViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashDiversifiableFullViewingKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashDiversifiableFullViewingKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashMemoBytes(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashMemoBytes.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashMemoBytes.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardBundle(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardBundle.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardBundle.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardDiversifierIndex(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardDiversifierIndex.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardDiversifierIndex.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardFullViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardFullViewingKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardFullViewingKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardOutgoingViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardOutgoingViewingKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardOutgoingViewingKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOutgoingViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOutgoingViewingKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOutgoingViewingKey.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashPaymentAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashPaymentAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashPaymentAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashRatio(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashRatio.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashRatio.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashSaplingBundle(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashSaplingBundle.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashSaplingBundle.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashSaplingMerklePath(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashSaplingMerklePath.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashSaplingMerklePath.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashTransparentAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashTransparentAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashTransparentAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashTransparentBundle(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashTransparentBundle.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashTransparentBundle.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashUnifiedAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashUnifiedAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashUnifiedAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashWalletSummary(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashWalletSummary.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashWalletSummary.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTupleAccountIdAndSaplingNote(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTupleAccountIdAndSaplingNote.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTupleAccountIdAndSaplingNote.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTupleBlockHeightAndHash(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTupleBlockHeightAndHash.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTupleBlockHeightAndHash.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTupleTargetAndAnchorHeight(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTupleTargetAndAnchorHeight.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTupleTargetAndAnchorHeight.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashAccountId(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashAccountId.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashAccountId.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashDiversifierIndexAndPaymentAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashDiversifierIndexAndPaymentAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashDiversifierIndexAndScope(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashDiversifierIndexAndScope.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashDiversifierIndexAndScope.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashUnifiedAddressAndDiversifierIndex(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashUnifiedAddressAndDiversifierIndex.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashUnifiedAddressAndDiversifierIndex.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZcashOrchardScope(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZcashOrchardScope.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZcashOrchardScope.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceUInt8.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceUInt8.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt32.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt64.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashBlockHeight(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashBlockHeight.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashBlockHeight.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashBlockMeta(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashBlockMeta.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashBlockMeta.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashCommitmentTreeRoot(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashCommitmentTreeRoot.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashCommitmentTreeRoot.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashDecryptedOutput(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashDecryptedOutput.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashDecryptedOutput.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardAction(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardAction.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardAction.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardIncomingViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardIncomingViewingKey.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardIncomingViewingKey.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardMerkleHash(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardMerkleHash.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardMerkleHash.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardOutgoingViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardOutgoingViewingKey.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardOutgoingViewingKey.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardSpendingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardSpendingKey.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardSpendingKey.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOutPoint(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOutPoint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOutPoint.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashReceivedNoteId(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashReceivedNoteId.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashReceivedNoteId.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashReceivedSaplingNote(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashReceivedSaplingNote.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashReceivedSaplingNote.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashSaplingNullifier(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashSaplingNullifier.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashSaplingNullifier.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashSaplingOutputDescription(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashSaplingOutputDescription.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashSaplingOutputDescription.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashSaplingSpendDescription(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashSaplingSpendDescription.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashSaplingSpendDescription.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashScanRange(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashScanRange.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashScanRange.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashScannedBlock(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashScannedBlock.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashScannedBlock.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashSentTransactionOutput(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashSentTransactionOutput.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashSentTransactionOutput.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashTransparentAddress(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashTransparentAddress.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashTransparentAddress.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashTxIn(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashTxIn.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashTxIn.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashTxOut(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashTxOut.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashTxOut.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashWalletSaplingOutput(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashWalletSaplingOutput.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashWalletSaplingOutput.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashWalletSaplingSpend(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashWalletSaplingSpend.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashWalletSaplingSpend.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashWalletTransparentOutput(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashWalletTransparentOutput.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashWalletTransparentOutput.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashWalletTx(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashWalletTx.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashWalletTx.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeTripleSaplingNullifierMap(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeTripleSaplingNullifierMap.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeTripleSaplingNullifierMap.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeTupleAccountIdAndSaplingNullifier(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeTupleAccountIdAndSaplingNullifier.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeTupleAccountIdAndSaplingNullifier.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeTupleSaplingCommitments(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeTupleSaplingCommitments.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeTupleSaplingCommitments.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashAuthPath(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashAuthPath.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashAuthPath.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardDecryptOutputForIncomingKeys(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardDecryptOutputForIncomingKeys.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardDecryptOutputForIncomingKeys.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashOrchardDecryptOutputForOutgoingKeys(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashOrchardDecryptOutputForOutgoingKeys.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashOrchardDecryptOutputForOutgoingKeys.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashPayment(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashPayment.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashPayment.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashPaymentParam(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashPaymentParam.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashPaymentParam.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeZcashChildIndex(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeZcashChildIndex.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeZcashChildIndex.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringTypeZcashAccountBalance(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeZcashAccountBalance.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeZcashAccountBalance.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringTypeZcashAddressMetadata(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeZcashAddressMetadata.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeZcashAddressMetadata.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringTypeZcashAmount(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeZcashAmount.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeZcashAmount.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapTypeZcashAccountIdTypeZcashUnifiedFullViewingKey(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterTypeZcashAccountId.write(key, buf)
            _UniffiConverterTypeZcashUnifiedFullViewingKey.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterTypeZcashAccountId.read(buf)
            val = _UniffiConverterTypeZcashUnifiedFullViewingKey.read(buf)
            d[key] = val
        return d

def decode_extended_full_viewing_key(hrp: "str",s: "str") -> "ZcashExtendedFullViewingKey":


    return _UniffiConverterTypeZcashExtendedFullViewingKey.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_full_viewing_key,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterString.lower(s)))


def decode_extended_spending_key(hrp: "str",s: "str") -> "ZcashExtendedSpendingKey":


    return _UniffiConverterTypeZcashExtendedSpendingKey.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_extended_spending_key,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterString.lower(s)))


def decode_payment_address(hrp: "str",s: "str") -> "ZcashPaymentAddress":


    return _UniffiConverterTypeZcashPaymentAddress.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_payment_address,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterString.lower(s)))


def decode_transparent_address(pubkey_version: "typing.List[int]",script_version: "typing.List[int]",s: "str") -> "ZcashTransparentAddress":



    return _UniffiConverterTypeZcashTransparentAddress.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_decode_transparent_address,
        _UniffiConverterSequenceUInt8.lower(pubkey_version),
        _UniffiConverterSequenceUInt8.lower(script_version),
        _UniffiConverterString.lower(s)))


def decrypt_and_store_transaction(params: "ZcashConsensusParameters",z_db_data: "ZcashWalletDb",tx: "ZcashTransaction"):



    _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_and_store_transaction,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashTransaction.lower(tx))


def decrypt_transaction(params: "ZcashConsensusParameters",height: "ZcashBlockHeight",tx: "ZcashTransaction",ufvks: "dict") -> "typing.List[ZcashDecryptedOutput]":




    return _UniffiConverterSequenceTypeZcashDecryptedOutput.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_decrypt_transaction,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashBlockHeight.lower(height),
        _UniffiConverterTypeZcashTransaction.lower(tx),
        _UniffiConverterMapTypeZcashAccountIdTypeZcashUnifiedFullViewingKey.lower(ufvks)))


def encode_extended_full_viewing_key(hrp: "str",extfvk: "ZcashExtendedFullViewingKey") -> "str":


    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_full_viewing_key,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterTypeZcashExtendedFullViewingKey.lower(extfvk)))


def encode_extended_spending_key(hrp: "str",extsk: "ZcashExtendedSpendingKey") -> "str":


    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_extended_spending_key,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterTypeZcashExtendedSpendingKey.lower(extsk)))


def encode_payment_address(hrp: "str",addr: "ZcashPaymentAddress") -> "str":


    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address,
        _UniffiConverterString.lower(hrp),
        _UniffiConverterTypeZcashPaymentAddress.lower(addr)))


def encode_payment_address_p(params: "ZcashConsensusParameters",addr: "ZcashPaymentAddress") -> "str":


    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_payment_address_p,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashPaymentAddress.lower(addr)))


def encode_transparent_address(pubkey_version: "typing.List[int]",script_version: "typing.List[int]",addr: "ZcashTransparentAddress") -> "str":



    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address,
        _UniffiConverterSequenceUInt8.lower(pubkey_version),
        _UniffiConverterSequenceUInt8.lower(script_version),
        _UniffiConverterTypeZcashTransparentAddress.lower(addr)))


def encode_transparent_address_p(params: "ZcashConsensusParameters",addr: "ZcashTransparentAddress") -> "str":


    return _UniffiConverterString.lift(_rust_call(_UniffiLib.uniffi_uniffi_zcash_fn_func_encode_transparent_address_p,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashTransparentAddress.lower(addr)))


def scan_cached_blocks(params: "ZcashConsensusParameters",fsblockdb_root: "str",db_data_path: "str",height: "ZcashBlockHeight",limit: "int"):





    _rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_scan_cached_blocks,
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterString.lower(fsblockdb_root),
        _UniffiConverterString.lower(db_data_path),
        _UniffiConverterTypeZcashBlockHeight.lower(height),
        _UniffiConverterUInt32.lower(limit))


def shield_transparent_funds_main_fixed(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashMainFixedGreedyInputSelector",shielding_threshold: "int",usk: "ZcashUnifiedSpendingKey",from_addrs: "typing.List[ZcashTransparentAddress]",memo: "ZcashMemoBytes",min_confirmations: "int") -> "ZcashTxId":









    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_fixed,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashMainFixedGreedyInputSelector.lower(input_selector),
        _UniffiConverterUInt64.lower(shielding_threshold),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterSequenceTypeZcashTransparentAddress.lower(from_addrs),
        _UniffiConverterTypeZcashMemoBytes.lower(memo),
        _UniffiConverterUInt32.lower(min_confirmations)))


def shield_transparent_funds_main_zip317(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashMainZip317GreedyInputSelector",shielding_threshold: "int",usk: "ZcashUnifiedSpendingKey",from_addrs: "typing.List[ZcashTransparentAddress]",memo: "ZcashMemoBytes",min_confirmations: "int") -> "ZcashTxId":









    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_main_zip317,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashMainZip317GreedyInputSelector.lower(input_selector),
        _UniffiConverterUInt64.lower(shielding_threshold),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterSequenceTypeZcashTransparentAddress.lower(from_addrs),
        _UniffiConverterTypeZcashMemoBytes.lower(memo),
        _UniffiConverterUInt32.lower(min_confirmations)))


def shield_transparent_funds_test_fixed(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashTestFixedGreedyInputSelector",shielding_threshold: "int",usk: "ZcashUnifiedSpendingKey",from_addrs: "typing.List[ZcashTransparentAddress]",memo: "ZcashMemoBytes",min_confirmations: "int") -> "ZcashTxId":









    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_fixed,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashTestFixedGreedyInputSelector.lower(input_selector),
        _UniffiConverterUInt64.lower(shielding_threshold),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterSequenceTypeZcashTransparentAddress.lower(from_addrs),
        _UniffiConverterTypeZcashMemoBytes.lower(memo),
        _UniffiConverterUInt32.lower(min_confirmations)))


def shield_transparent_funds_test_zip317(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashTestZip317GreedyInputSelector",shielding_threshold: "int",usk: "ZcashUnifiedSpendingKey",from_addrs: "typing.List[ZcashTransparentAddress]",memo: "ZcashMemoBytes",min_confirmations: "int") -> "ZcashTxId":









    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_shield_transparent_funds_test_zip317,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashTestZip317GreedyInputSelector.lower(input_selector),
        _UniffiConverterUInt64.lower(shielding_threshold),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterSequenceTypeZcashTransparentAddress.lower(from_addrs),
        _UniffiConverterTypeZcashMemoBytes.lower(memo),
        _UniffiConverterUInt32.lower(min_confirmations)))


def spend_main_fixed(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashMainFixedGreedyInputSelector",usk: "ZcashUnifiedSpendingKey",request: "ZcashTransactionRequest",ovk_policy: "ZcashOvkPolicy",min_confirmations: "int") -> "ZcashTxId":








    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_fixed,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashMainFixedGreedyInputSelector.lower(input_selector),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterTypeZcashTransactionRequest.lower(request),
        _UniffiConverterTypeZcashOvkPolicy.lower(ovk_policy),
        _UniffiConverterUInt32.lower(min_confirmations)))


def spend_main_zip317(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashMainZip317GreedyInputSelector",usk: "ZcashUnifiedSpendingKey",request: "ZcashTransactionRequest",ovk_policy: "ZcashOvkPolicy",min_confirmations: "int") -> "ZcashTxId":








    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_main_zip317,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashMainZip317GreedyInputSelector.lower(input_selector),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterTypeZcashTransactionRequest.lower(request),
        _UniffiConverterTypeZcashOvkPolicy.lower(ovk_policy),
        _UniffiConverterUInt32.lower(min_confirmations)))


def spend_test_fixed(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashTestFixedGreedyInputSelector",usk: "ZcashUnifiedSpendingKey",request: "ZcashTransactionRequest",ovk_policy: "ZcashOvkPolicy",min_confirmations: "int") -> "ZcashTxId":








    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_fixed,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashTestFixedGreedyInputSelector.lower(input_selector),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterTypeZcashTransactionRequest.lower(request),
        _UniffiConverterTypeZcashOvkPolicy.lower(ovk_policy),
        _UniffiConverterUInt32.lower(min_confirmations)))


def spend_test_zip317(z_db_data: "ZcashWalletDb",params: "ZcashConsensusParameters",prover: "ZcashLocalTxProver",input_selector: "ZcashTestZip317GreedyInputSelector",usk: "ZcashUnifiedSpendingKey",request: "ZcashTransactionRequest",ovk_policy: "ZcashOvkPolicy",min_confirmations: "int") -> "ZcashTxId":








    return _UniffiConverterTypeZcashTxId.lift(_rust_call_with_error(_UniffiConverterTypeZcashError,_UniffiLib.uniffi_uniffi_zcash_fn_func_spend_test_zip317,
        _UniffiConverterTypeZcashWalletDb.lower(z_db_data),
        _UniffiConverterTypeZcashConsensusParameters.lower(params),
        _UniffiConverterTypeZcashLocalTxProver.lower(prover),
        _UniffiConverterTypeZcashTestZip317GreedyInputSelector.lower(input_selector),
        _UniffiConverterTypeZcashUnifiedSpendingKey.lower(usk),
        _UniffiConverterTypeZcashTransactionRequest.lower(request),
        _UniffiConverterTypeZcashOvkPolicy.lower(ovk_policy),
        _UniffiConverterUInt32.lower(min_confirmations)))


__all__ = [
    "InternalError",
    "ZcashBranchId",
    "ZcashChildIndex",
    "ZcashConsensusParameters",
    "ZcashDustAction",
    "ZcashError",
    "ZcashFeeRules",
    "ZcashKeySeed",
    "ZcashKeysEra",
    "ZcashMemo",
    "ZcashNullifierQuery",
    "ZcashOrchardScope",
    "ZcashOvkPolicy",
    "ZcashPoolType",
    "ZcashRecipient",
    "ZcashRseed",
    "ZcashScanPriority",
    "ZcashScope",
    "ZcashShieldedProtocol",
    "ZcashTransferType",
    "ZcashTxVersionSelection",
    "ZcashWalletMigrationError",
    "ZcashZip321Error",
    "TripleSaplingNullifierMap",
    "TupleAccountIdAndSaplingNote",
    "TupleAccountIdAndSaplingNullifier",
    "TupleAccountIdAndUnifiedSpendingKey",
    "TupleBlockHeightAndHash",
    "TupleSaplingCommitments",
    "TupleTargetAndAnchorHeight",
    "ZcashAccountId",
    "ZcashAuthPath",
    "ZcashDiversifierIndexAndPaymentAddress",
    "ZcashDiversifierIndexAndScope",
    "ZcashInternalOvkExternalOvk",
    "ZcashOrchardDecryptOutput",
    "ZcashOrchardDecryptOutputForIncomingKeys",
    "ZcashOrchardDecryptOutputForOutgoingKeys",
    "ZcashOrchardTransmittedNoteCiphertext",
    "ZcashPayment",
    "ZcashPaymentParam",
    "ZcashSentTransaction",
    "ZcashTransactionAndSaplingMetadata",
    "ZcashTransparentAddressAndIndex",
    "ZcashUnifiedAddressAndDiversifierIndex",
    "decode_extended_full_viewing_key",
    "decode_extended_spending_key",
    "decode_payment_address",
    "decode_transparent_address",
    "decrypt_and_store_transaction",
    "decrypt_transaction",
    "encode_extended_full_viewing_key",
    "encode_extended_spending_key",
    "encode_payment_address",
    "encode_payment_address_p",
    "encode_transparent_address",
    "encode_transparent_address_p",
    "scan_cached_blocks",
    "shield_transparent_funds_main_fixed",
    "shield_transparent_funds_main_zip317",
    "shield_transparent_funds_test_fixed",
    "shield_transparent_funds_test_zip317",
    "spend_main_fixed",
    "spend_main_zip317",
    "spend_test_fixed",
    "spend_test_zip317",
    "MerkleTreeFrontier",
    "MerkleTreePosition",
    "MerkleTreeRetention",
    "SecpSecretKey",
    "TestSupport",
    "TimeOffsetDateTime",
    "ZcashAccountBalance",
    "ZcashAccountBirthday",
    "ZcashAccountPrivKey",
    "ZcashAccountPubKey",
    "ZcashAddressMetadata",
    "ZcashAmount",
    "ZcashAnchor",
    "ZcashBalance",
    "ZcashBlockHash",
    "ZcashBlockHeight",
    "ZcashBlockMeta",
    "ZcashBlockMetadata",
    "ZcashCommitmentTree",
    "ZcashCommitmentTreeRoot",
    "ZcashDecryptedOutput",
    "ZcashDecryptedTransaction",
    "ZcashDiversifiableFullViewingKey",
    "ZcashDiversifier",
    "ZcashDiversifierIndex",
    "ZcashDustOutputPolicy",
    "ZcashExpandedSpendingKey",
    "ZcashExtendedFullViewingKey",
    "ZcashExtendedPrivKey",
    "ZcashExtendedSpendingKey",
    "ZcashExternalIvk",
    "ZcashExternalOvk",
    "ZcashExtractedNoteCommitment",
    "ZcashFixedFeeRule",
    "ZcashFixedSingleOutputChangeStrategy",
    "ZcashFsBlockDb",
    "ZcashFullViewingKey",
    "ZcashIncrementalWitness",
    "ZcashInternalIvk",
    "ZcashInternalOvk",
    "ZcashJubjubFr",
    "ZcashKeyIndex",
    "ZcashLocalTxProver",
    "ZcashMainFixedGreedyInputSelector",
    "ZcashMainZip317GreedyInputSelector",
    "ZcashMemoBytes",
    "ZcashNonNegativeAmount",
    "ZcashNoteId",
    "ZcashNullifierDerivingKey",
    "ZcashOrchardAction",
    "ZcashOrchardAddress",
    "ZcashOrchardBundle",
    "ZcashOrchardDiversifier",
    "ZcashOrchardDiversifierIndex",
    "ZcashOrchardFlags",
    "ZcashOrchardFullViewingKey",
    "ZcashOrchardIncomingViewingKey",
    "ZcashOrchardMerkleHash",
    "ZcashOrchardMerklePath",
    "ZcashOrchardNote",
    "ZcashOrchardNoteCommitment",
    "ZcashOrchardNoteValue",
    "ZcashOrchardNullifier",
    "ZcashOrchardOutgoingViewingKey",
    "ZcashOrchardRandomSeed",
    "ZcashOrchardSpendingKey",
    "ZcashOrchardTransactionBuilder",
    "ZcashOrchardValueCommitment",
    "ZcashOutPoint",
    "ZcashOutgoingViewingKey",
    "ZcashPaymentAddress",
    "ZcashProofGenerationKey",
    "ZcashProvingKey",
    "ZcashRatio",
    "ZcashReceivedNoteId",
    "ZcashReceivedSaplingNote",
    "ZcashRecipientAddress",
    "ZcashSaplingBundle",
    "ZcashSaplingDiversifiedTransmissionKey",
    "ZcashSaplingExtractedNoteCommitment",
    "ZcashSaplingIvk",
    "ZcashSaplingMerklePath",
    "ZcashSaplingMetadata",
    "ZcashSaplingNode",
    "ZcashSaplingNote",
    "ZcashSaplingNoteValue",
    "ZcashSaplingNullifier",
    "ZcashSaplingOutputDescription",
    "ZcashSaplingPublicKey",
    "ZcashSaplingSpendDescription",
    "ZcashSaplingValueCommitment",
    "ZcashScanRange",
    "ZcashScannedBlock",
    "ZcashScript",
    "ZcashSentTransactionOutput",
    "ZcashTestFixedGreedyInputSelector",
    "ZcashTestZip317GreedyInputSelector",
    "ZcashTransaction",
    "ZcashTransactionBuilder",
    "ZcashTransactionRequest",
    "ZcashTransparentAddress",
    "ZcashTransparentBundle",
    "ZcashTreeState",
    "ZcashTxId",
    "ZcashTxIn",
    "ZcashTxOut",
    "ZcashTxVersion",
    "ZcashUnifiedAddress",
    "ZcashUnifiedFullViewingKey",
    "ZcashUnifiedSpendingKey",
    "ZcashVerifyingKey",
    "ZcashViewingKey",
    "ZcashWalletDb",
    "ZcashWalletSaplingOutput",
    "ZcashWalletSaplingSpend",
    "ZcashWalletSummary",
    "ZcashWalletTransparentOutput",
    "ZcashWalletTx",
    "ZcashZip317FeeRule",
    "ZcashZip317SingleOutputChangeStrategy",
]

